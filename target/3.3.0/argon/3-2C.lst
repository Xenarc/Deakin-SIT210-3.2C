
g:/Mark/Documents/DOCUMENTS/Deakin/SIT210_Embedded_Systems_Development/3.2C/3-2C/target/3.3.0/argon/3-2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c74  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5c90  000b5c90  00005c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5cb4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e648  000b5cb8  0001e648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  2003e6b4  2003e6b4  0002e6b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5d24  000b5d24  00025d24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5d4c  000b5d4c  00025d4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001044db  00000000  00000000  00025d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011196  00000000  00000000  0012a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036bef  00000000  00000000  0013b3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e0  00000000  00000000  00171fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009d88  00000000  00000000  00174690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036936  00000000  00000000  0017e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000385e2  00000000  00000000  001b4d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133677  00000000  00000000  001ed330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006d60  00000000  00000000  003209a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fbf0 	bl	b5812 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fbf8 	bl	b582e <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e648 	.word	0x2003e648
   b4048:	000b5cb8 	.word	0x000b5cb8
   b404c:	2003e6b4 	.word	0x2003e6b4
   b4050:	2003e6b4 	.word	0x2003e6b4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fdb5 	bl	b4bcc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5c64 	.word	0x000b5c64
   b407c:	000b5c88 	.word	0x000b5c88

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b860 	b.w	b4144 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f881 	bl	b418c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bd55 	b.w	b4b3c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 baed 	b.w	b4670 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 baeb 	b.w	b4670 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 baf1 	b.w	b4680 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_Z7Publish6String>:
const int SunnyThreshold = 300;
bool isSunny = false;
int suntimeCounter = 0;
const int frequency = 2500;

bool Publish(const String message){
   b40b0:	b530      	push	{r4, r5, lr}
   b40b2:	4604      	mov	r4, r0
   b40b4:	b085      	sub	sp, #20
  Serial.println(message);
   b40b6:	f001 f929 	bl	b530c <_Z16_fetch_usbserialv>
   b40ba:	6821      	ldr	r1, [r4, #0]
   b40bc:	f000 fcd5 	bl	b4a6a <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b40c0:	4b1e      	ldr	r3, [pc, #120]	; (b413c <_Z7Publish6String+0x8c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	491f      	ldr	r1, [pc, #124]	; (b4140 <_Z7Publish6String+0x90>)
   b40c4:	781b      	ldrb	r3, [r3, #0]
   b40c6:	f88d 3000 	strb.w	r3, [sp]
   b40ca:	6822      	ldr	r2, [r4, #0]
   b40cc:	a802      	add	r0, sp, #8
   b40ce:	233c      	movs	r3, #60	; 0x3c
   b40d0:	f000 feda 	bl	b4e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b40d4:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b40d6:	9c02      	ldr	r4, [sp, #8]
   b40d8:	f000 fa26 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b40dc:	b120      	cbz	r0, b40e8 <_Z7Publish6String+0x38>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b40de:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b40e0:	b913      	cbnz	r3, b40e8 <_Z7Publish6String+0x38>
        spark_process();
   b40e2:	f000 faa5 	bl	b4630 <spark_process>
    }
   b40e6:	e7fa      	b.n	b40de <_Z7Publish6String+0x2e>
   b40e8:	7863      	ldrb	r3, [r4, #1]
   b40ea:	f3bf 8f5b 	dmb	ish
   b40ee:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b40f0:	b9ab      	cbnz	r3, b411e <_Z7Publish6String+0x6e>
        return std::move(defaultValue);
   b40f2:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   b40f4:	9c03      	ldr	r4, [sp, #12]
   b40f6:	b17c      	cbz	r4, b4118 <_Z7Publish6String+0x68>
      if (--_M_use_count == 0)
   b40f8:	6863      	ldr	r3, [r4, #4]
   b40fa:	3b01      	subs	r3, #1
   b40fc:	6063      	str	r3, [r4, #4]
   b40fe:	b95b      	cbnz	r3, b4118 <_Z7Publish6String+0x68>
          _M_dispose();
   b4100:	6823      	ldr	r3, [r4, #0]
   b4102:	4620      	mov	r0, r4
   b4104:	689b      	ldr	r3, [r3, #8]
   b4106:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4108:	68a3      	ldr	r3, [r4, #8]
   b410a:	3b01      	subs	r3, #1
   b410c:	60a3      	str	r3, [r4, #8]
   b410e:	b91b      	cbnz	r3, b4118 <_Z7Publish6String+0x68>
            _M_destroy();
   b4110:	6823      	ldr	r3, [r4, #0]
   b4112:	4620      	mov	r0, r4
   b4114:	68db      	ldr	r3, [r3, #12]
   b4116:	4798      	blx	r3
  return Particle.publish("MBlashkiArgon_Sunlight", message, PRIVATE);
}
   b4118:	4628      	mov	r0, r5
   b411a:	b005      	add	sp, #20
   b411c:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b411e:	2000      	movs	r0, #0
   b4120:	f000 fa02 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4124:	b120      	cbz	r0, b4130 <_Z7Publish6String+0x80>
   b4126:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4128:	b913      	cbnz	r3, b4130 <_Z7Publish6String+0x80>
        spark_process();
   b412a:	f000 fa81 	bl	b4630 <spark_process>
    }
   b412e:	e7fa      	b.n	b4126 <_Z7Publish6String+0x76>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4130:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4132:	2b01      	cmp	r3, #1
   b4134:	d1dd      	bne.n	b40f2 <_Z7Publish6String+0x42>
            return result_;
   b4136:	7b25      	ldrb	r5, [r4, #12]
   b4138:	e7dc      	b.n	b40f4 <_Z7Publish6String+0x44>
   b413a:	bf00      	nop
   b413c:	2003e6b4 	.word	0x2003e6b4
   b4140:	000b59d8 	.word	0x000b59d8

000b4144 <setup>:

void setup(){
   b4144:	b510      	push	{r4, lr}

  Serial.begin(9600);
   b4146:	f001 f8e1 	bl	b530c <_Z16_fetch_usbserialv>
   b414a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b414e:	f001 f8d1 	bl	b52f4 <_ZN9USBSerial5beginEl>
  Serial.println(F("Ready"));

  Wire.begin();

  lightMeter.begin();
   b4152:	4c0b      	ldr	r4, [pc, #44]	; (b4180 <setup+0x3c>)
  Serial.println(F("Ready"));
   b4154:	f001 f8da 	bl	b530c <_Z16_fetch_usbserialv>
   b4158:	490a      	ldr	r1, [pc, #40]	; (b4184 <setup+0x40>)
   b415a:	f000 fc90 	bl	b4a7e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Wire.begin();
   b415e:	f001 fb29 	bl	b57b4 <_Z19__fetch_global_Wirev>
   b4162:	f001 f99d 	bl	b54a0 <_ZN7TwoWire5beginEv>
  lightMeter.begin();
   b4166:	4620      	mov	r0, r4
   b4168:	f000 f881 	bl	b426e <_ZN6BH17505beginEv>
  lightMeter.switch_power_on();
   b416c:	4620      	mov	r0, r4
   b416e:	f000 f8cf 	bl	b4310 <_ZN6BH175015switch_power_onEv>
  Serial.println(F("BH1750 Setup"));
   b4172:	f001 f8cb 	bl	b530c <_Z16_fetch_usbserialv>
}
   b4176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(F("BH1750 Setup"));
   b417a:	4903      	ldr	r1, [pc, #12]	; (b4188 <setup+0x44>)
   b417c:	f000 bc7f 	b.w	b4a7e <_ZN5Print7printlnEPK19__FlashStringHelper>
   b4180:	2003e6b8 	.word	0x2003e6b8
   b4184:	000b59ef 	.word	0x000b59ef
   b4188:	000b59f5 	.word	0x000b59f5

000b418c <loop>:

void loop() {
   b418c:	b530      	push	{r4, r5, lr}
  float lux = lightMeter.get_light_level();
  
  if(isSunny){
   b418e:	4d25      	ldr	r5, [pc, #148]	; (b4224 <loop+0x98>)
  float lux = lightMeter.get_light_level();
   b4190:	4825      	ldr	r0, [pc, #148]	; (b4228 <loop+0x9c>)
void loop() {
   b4192:	b089      	sub	sp, #36	; 0x24
  float lux = lightMeter.get_light_level();
   b4194:	f000 f876 	bl	b4284 <_ZN6BH175015get_light_levelEv>
  if(isSunny){
   b4198:	782b      	ldrb	r3, [r5, #0]
   b419a:	eddf 7a24 	vldr	s15, [pc, #144]	; b422c <loop+0xa0>
   b419e:	b373      	cbz	r3, b41fe <loop+0x72>
    suntimeCounter++;
   b41a0:	4c23      	ldr	r4, [pc, #140]	; (b4230 <loop+0xa4>)
   b41a2:	6823      	ldr	r3, [r4, #0]
  }
  
  if(isSunny && lux < SunnyThreshold){
   b41a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    suntimeCounter++;
   b41a8:	3301      	adds	r3, #1
  if(isSunny && lux < SunnyThreshold){
   b41aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    suntimeCounter++;
   b41ae:	6023      	str	r3, [r4, #0]
  if(isSunny && lux < SunnyThreshold){
   b41b0:	d51e      	bpl.n	b41f0 <loop+0x64>
    // Not sunny -> sunny
    String message = "turned shady. It was in the sun for ";
   b41b2:	4920      	ldr	r1, [pc, #128]	; (b4234 <loop+0xa8>)
   b41b4:	4668      	mov	r0, sp
   b41b6:	f000 fb7a 	bl	b48ae <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat(suntimeCounter*frequency/1000/60);
   b41ba:	2318      	movs	r3, #24
   b41bc:	6821      	ldr	r1, [r4, #0]
   b41be:	fb91 f1f3 	sdiv	r1, r1, r3
   b41c2:	4668      	mov	r0, sp
   b41c4:	f000 fbc9 	bl	b495a <_ZN6String6concatEi>
    message.concat(" minutes");
   b41c8:	491b      	ldr	r1, [pc, #108]	; (b4238 <loop+0xac>)
   b41ca:	4668      	mov	r0, sp
   b41cc:	f000 fbb4 	bl	b4938 <_ZN6String6concatEPKc>
    Publish(message);
   b41d0:	4669      	mov	r1, sp
   b41d2:	a804      	add	r0, sp, #16
   b41d4:	f000 fb8e 	bl	b48f4 <_ZN6StringC1ERKS_>
   b41d8:	a804      	add	r0, sp, #16
   b41da:	f7ff ff69 	bl	b40b0 <_Z7Publish6String>
   b41de:	a804      	add	r0, sp, #16
   b41e0:	f000 fb1a 	bl	b4818 <_ZN6StringD1Ev>
    isSunny = false;
   b41e4:	2300      	movs	r3, #0
    String message = "turned shady. It was in the sun for ";
   b41e6:	4668      	mov	r0, sp
    isSunny = false;
   b41e8:	702b      	strb	r3, [r5, #0]
    suntimeCounter = 0;
   b41ea:	6023      	str	r3, [r4, #0]
    String message = "turned shady. It was in the sun for ";
   b41ec:	f000 fb14 	bl	b4818 <_ZN6StringD1Ev>
  else if(!isSunny && lux >= SunnyThreshold){
    // Sunny -> not sunny
    Publish("turned sunny");
    isSunny = true;
  }
  delay(frequency);
   b41f0:	f640 10c4 	movw	r0, #2500	; 0x9c4
}
   b41f4:	b009      	add	sp, #36	; 0x24
   b41f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(frequency);
   b41fa:	f000 bc73 	b.w	b4ae4 <delay>
  else if(!isSunny && lux >= SunnyThreshold){
   b41fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b4202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4206:	dbf3      	blt.n	b41f0 <loop+0x64>
    Publish("turned sunny");
   b4208:	490c      	ldr	r1, [pc, #48]	; (b423c <loop+0xb0>)
   b420a:	a804      	add	r0, sp, #16
   b420c:	f000 fb4f 	bl	b48ae <_ZN6StringC1EPK19__FlashStringHelper>
   b4210:	a804      	add	r0, sp, #16
   b4212:	f7ff ff4d 	bl	b40b0 <_Z7Publish6String>
   b4216:	a804      	add	r0, sp, #16
   b4218:	f000 fafe 	bl	b4818 <_ZN6StringD1Ev>
    isSunny = true;
   b421c:	2301      	movs	r3, #1
   b421e:	702b      	strb	r3, [r5, #0]
   b4220:	e7e6      	b.n	b41f0 <loop+0x64>
   b4222:	bf00      	nop
   b4224:	2003e6b5 	.word	0x2003e6b5
   b4228:	2003e6b8 	.word	0x2003e6b8
   b422c:	43960000 	.word	0x43960000
   b4230:	2003e6c0 	.word	0x2003e6c0
   b4234:	000b5a02 	.word	0x000b5a02
   b4238:	000b5a27 	.word	0x000b5a27
   b423c:	000b5a30 	.word	0x000b5a30

000b4240 <_GLOBAL__sub_I_lightMeter>:
}
   b4240:	b508      	push	{r3, lr}
        val_(val) {
   b4242:	4b06      	ldr	r3, [pc, #24]	; (b425c <_GLOBAL__sub_I_lightMeter+0x1c>)
   b4244:	2201      	movs	r2, #1
   b4246:	701a      	strb	r2, [r3, #0]
BH1750 lightMeter;
   b4248:	f001 fab4 	bl	b57b4 <_Z19__fetch_global_Wirev>
}
   b424c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BH1750 lightMeter;
   b4250:	4602      	mov	r2, r0
   b4252:	2123      	movs	r1, #35	; 0x23
   b4254:	4802      	ldr	r0, [pc, #8]	; (b4260 <_GLOBAL__sub_I_lightMeter+0x20>)
   b4256:	f000 b805 	b.w	b4264 <_ZN6BH1750C1EhR7TwoWire>
   b425a:	bf00      	nop
   b425c:	2003e6b4 	.word	0x2003e6b4
   b4260:	2003e6b8 	.word	0x2003e6b8

000b4264 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
   b4264:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
   b4266:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
   b4268:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
   b426a:	7002      	strb	r2, [r0, #0]
}
   b426c:	4770      	bx	lr

000b426e <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
   b426e:	b510      	push	{r4, lr}
   b4270:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
   b4272:	6840      	ldr	r0, [r0, #4]
   b4274:	f001 f951 	bl	b551a <_ZN7TwoWire9isEnabledEv>
   b4278:	b910      	cbnz	r0, b4280 <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
   b427a:	6860      	ldr	r0, [r4, #4]
   b427c:	f001 f910 	bl	b54a0 <_ZN7TwoWire5beginEv>
  }

  return true;
}
   b4280:	2001      	movs	r0, #1
   b4282:	bd10      	pop	{r4, pc}

000b4284 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
   b4284:	b570      	push	{r4, r5, r6, lr}
   b4286:	4605      	mov	r5, r0
  m_i2c.beginTransmission(m_i2c_addr);
   b4288:	7841      	ldrb	r1, [r0, #1]
   b428a:	6840      	ldr	r0, [r0, #4]
   b428c:	f001 f93a 	bl	b5504 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
   b4290:	7869      	ldrb	r1, [r5, #1]
   b4292:	6868      	ldr	r0, [r5, #4]
   b4294:	2202      	movs	r2, #2
   b4296:	f001 f932 	bl	b54fe <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
   b429a:	6868      	ldr	r0, [r5, #4]
   b429c:	6803      	ldr	r3, [r0, #0]
   b429e:	695b      	ldr	r3, [r3, #20]
   b42a0:	4798      	blx	r3
   b42a2:	4606      	mov	r6, r0
   b42a4:	6868      	ldr	r0, [r5, #4]
   b42a6:	6803      	ldr	r3, [r0, #0]
   b42a8:	695b      	ldr	r3, [r3, #20]
   b42aa:	4798      	blx	r3
   b42ac:	4604      	mov	r4, r0
   b42ae:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  m_i2c.endTransmission();
   b42b2:	6868      	ldr	r0, [r5, #4]

  return (float)level / 1.2f; // convert to lux
   b42b4:	b2a4      	uxth	r4, r4
  m_i2c.endTransmission();
   b42b6:	f001 f92d 	bl	b5514 <_ZN7TwoWire15endTransmissionEv>
  return (float)level / 1.2f; // convert to lux
   b42ba:	ee07 4a90 	vmov	s15, r4
}
   b42be:	ed9f 0a03 	vldr	s0, [pc, #12]	; b42cc <_ZN6BH175015get_light_levelEv+0x48>
  return (float)level / 1.2f; // convert to lux
   b42c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
   b42c6:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b42ca:	bd70      	pop	{r4, r5, r6, pc}
   b42cc:	3f99999a 	.word	0x3f99999a

000b42d0 <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
   b42d0:	7803      	ldrb	r3, [r0, #0]
   b42d2:	2b23      	cmp	r3, #35	; 0x23
   b42d4:	d005      	beq.n	b42e2 <_ZN6BH175020wait_for_measurementEv+0x12>
   b42d6:	2b13      	cmp	r3, #19
   b42d8:	bf0c      	ite	eq
   b42da:	2018      	moveq	r0, #24
   b42dc:	20b4      	movne	r0, #180	; 0xb4
   b42de:	f000 bc01 	b.w	b4ae4 <delay>
   b42e2:	2018      	movs	r0, #24
   b42e4:	e7fb      	b.n	b42de <_ZN6BH175020wait_for_measurementEv+0xe>

000b42e6 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
   b42e6:	b538      	push	{r3, r4, r5, lr}
   b42e8:	4604      	mov	r4, r0
   b42ea:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
   b42ec:	7841      	ldrb	r1, [r0, #1]
   b42ee:	6840      	ldr	r0, [r0, #4]
   b42f0:	f001 f908 	bl	b5504 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
   b42f4:	6860      	ldr	r0, [r4, #4]
   b42f6:	6803      	ldr	r3, [r0, #0]
   b42f8:	4629      	mov	r1, r5
   b42fa:	689b      	ldr	r3, [r3, #8]
   b42fc:	4798      	blx	r3
  m_i2c.endTransmission();
   b42fe:	6860      	ldr	r0, [r4, #4]
   b4300:	f001 f908 	bl	b5514 <_ZN7TwoWire15endTransmissionEv>
  m_mode = _mode;
   b4304:	7025      	strb	r5, [r4, #0]
  wait_for_measurement();
   b4306:	4620      	mov	r0, r4
}
   b4308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
   b430c:	f7ff bfe0 	b.w	b42d0 <_ZN6BH175020wait_for_measurementEv>

000b4310 <_ZN6BH175015switch_power_onEv>:
  set_sensor_mode(m_mode);
   b4310:	7801      	ldrb	r1, [r0, #0]
   b4312:	f7ff bfe8 	b.w	b42e6 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
	...

000b4318 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b02      	ldr	r3, [pc, #8]	; (b4324 <netdb_freeaddrinfo+0xc>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	689b      	ldr	r3, [r3, #8]
   b4320:	9301      	str	r3, [sp, #4]
   b4322:	bd08      	pop	{r3, pc}
   b4324:	00030268 	.word	0x00030268

000b4328 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4328:	b508      	push	{r3, lr}
   b432a:	4b02      	ldr	r3, [pc, #8]	; (b4334 <netdb_getaddrinfo+0xc>)
   b432c:	681b      	ldr	r3, [r3, #0]
   b432e:	68db      	ldr	r3, [r3, #12]
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	bd08      	pop	{r3, pc}
   b4334:	00030268 	.word	0x00030268

000b4338 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4338:	b508      	push	{r3, lr}
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <HAL_RNG_GetRandomNumber+0xc>)
   b433c:	681b      	ldr	r3, [r3, #0]
   b433e:	685b      	ldr	r3, [r3, #4]
   b4340:	9301      	str	r3, [sp, #4]
   b4342:	bd08      	pop	{r3, pc}
   b4344:	00030218 	.word	0x00030218

000b4348 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4348:	b508      	push	{r3, lr}
   b434a:	4b02      	ldr	r3, [pc, #8]	; (b4354 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b434c:	681b      	ldr	r3, [r3, #0]
   b434e:	695b      	ldr	r3, [r3, #20]
   b4350:	9301      	str	r3, [sp, #4]
   b4352:	bd08      	pop	{r3, pc}
   b4354:	00030218 	.word	0x00030218

000b4358 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4358:	b508      	push	{r3, lr}
   b435a:	4b02      	ldr	r3, [pc, #8]	; (b4364 <os_mutex_recursive_create+0xc>)
   b435c:	681b      	ldr	r3, [r3, #0]
   b435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4360:	9301      	str	r3, [sp, #4]
   b4362:	bd08      	pop	{r3, pc}
   b4364:	00030248 	.word	0x00030248

000b4368 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4368:	b508      	push	{r3, lr}
   b436a:	4b02      	ldr	r3, [pc, #8]	; (b4374 <inet_inet_ntop+0xc>)
   b436c:	681b      	ldr	r3, [r3, #0]
   b436e:	695b      	ldr	r3, [r3, #20]
   b4370:	9301      	str	r3, [sp, #4]
   b4372:	bd08      	pop	{r3, pc}
   b4374:	00030264 	.word	0x00030264

000b4378 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4378:	b508      	push	{r3, lr}
   b437a:	4b02      	ldr	r3, [pc, #8]	; (b4384 <hal_usart_write+0xc>)
   b437c:	681b      	ldr	r3, [r3, #0]
   b437e:	68db      	ldr	r3, [r3, #12]
   b4380:	9301      	str	r3, [sp, #4]
   b4382:	bd08      	pop	{r3, pc}
   b4384:	0003023c 	.word	0x0003023c

000b4388 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b02      	ldr	r3, [pc, #8]	; (b4394 <hal_usart_available+0xc>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	691b      	ldr	r3, [r3, #16]
   b4390:	9301      	str	r3, [sp, #4]
   b4392:	bd08      	pop	{r3, pc}
   b4394:	0003023c 	.word	0x0003023c

000b4398 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4398:	b508      	push	{r3, lr}
   b439a:	4b02      	ldr	r3, [pc, #8]	; (b43a4 <hal_usart_read+0xc>)
   b439c:	681b      	ldr	r3, [r3, #0]
   b439e:	695b      	ldr	r3, [r3, #20]
   b43a0:	9301      	str	r3, [sp, #4]
   b43a2:	bd08      	pop	{r3, pc}
   b43a4:	0003023c 	.word	0x0003023c

000b43a8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43a8:	b508      	push	{r3, lr}
   b43aa:	4b02      	ldr	r3, [pc, #8]	; (b43b4 <hal_usart_peek+0xc>)
   b43ac:	681b      	ldr	r3, [r3, #0]
   b43ae:	699b      	ldr	r3, [r3, #24]
   b43b0:	9301      	str	r3, [sp, #4]
   b43b2:	bd08      	pop	{r3, pc}
   b43b4:	0003023c 	.word	0x0003023c

000b43b8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43b8:	b508      	push	{r3, lr}
   b43ba:	4b02      	ldr	r3, [pc, #8]	; (b43c4 <hal_usart_flush+0xc>)
   b43bc:	681b      	ldr	r3, [r3, #0]
   b43be:	69db      	ldr	r3, [r3, #28]
   b43c0:	9301      	str	r3, [sp, #4]
   b43c2:	bd08      	pop	{r3, pc}
   b43c4:	0003023c 	.word	0x0003023c

000b43c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b02      	ldr	r3, [pc, #8]	; (b43d4 <hal_usart_available_data_for_write+0xc>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43d0:	9301      	str	r3, [sp, #4]
   b43d2:	bd08      	pop	{r3, pc}
   b43d4:	0003023c 	.word	0x0003023c

000b43d8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <hal_usart_init_ex+0xc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43e0:	9301      	str	r3, [sp, #4]
   b43e2:	bd08      	pop	{r3, pc}
   b43e4:	0003023c 	.word	0x0003023c

000b43e8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <hal_i2c_begin+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	68db      	ldr	r3, [r3, #12]
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	00030228 	.word	0x00030228

000b43f8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <hal_i2c_begin_transmission+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	699b      	ldr	r3, [r3, #24]
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	00030228 	.word	0x00030228

000b4408 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <hal_i2c_end_transmission+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	69db      	ldr	r3, [r3, #28]
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	00030228 	.word	0x00030228

000b4418 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <hal_i2c_write+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	6a1b      	ldr	r3, [r3, #32]
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	00030228 	.word	0x00030228

000b4428 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <hal_i2c_available+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	00030228 	.word	0x00030228

000b4438 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <hal_i2c_read+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	00030228 	.word	0x00030228

000b4448 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <hal_i2c_peek+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	00030228 	.word	0x00030228

000b4458 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <hal_i2c_flush+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	00030228 	.word	0x00030228

000b4468 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <hal_i2c_is_enabled+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	00030228 	.word	0x00030228

000b4478 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <hal_i2c_init+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	00030228 	.word	0x00030228

000b4488 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <hal_i2c_request_ex+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	00030228 	.word	0x00030228

000b4498 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <HAL_USB_USART_Init+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	681b      	ldr	r3, [r3, #0]
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	0003024c 	.word	0x0003024c

000b44a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <HAL_USB_USART_Begin+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	685b      	ldr	r3, [r3, #4]
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	0003024c 	.word	0x0003024c

000b44b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <HAL_USB_USART_Available_Data+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	691b      	ldr	r3, [r3, #16]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003024c 	.word	0x0003024c

000b44c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	695b      	ldr	r3, [r3, #20]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	0003024c 	.word	0x0003024c

000b44d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <HAL_USB_USART_Receive_Data+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	699b      	ldr	r3, [r3, #24]
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	0003024c 	.word	0x0003024c

000b44e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <HAL_USB_USART_Send_Data+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	69db      	ldr	r3, [r3, #28]
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	0003024c 	.word	0x0003024c

000b44f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <HAL_USB_USART_Flush_Data+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	6a1b      	ldr	r3, [r3, #32]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	0003024c 	.word	0x0003024c

000b4508 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <set_system_mode+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	685b      	ldr	r3, [r3, #4]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	00030220 	.word	0x00030220

000b4518 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <system_delay_ms+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	695b      	ldr	r3, [r3, #20]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030220 	.word	0x00030220

000b4528 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <application_thread_current+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030220 	.word	0x00030220

000b4538 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <application_thread_invoke+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030220 	.word	0x00030220

000b4548 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b03      	ldr	r3, [pc, #12]	; (b4558 <system_ctrl_set_app_request_handler+0x10>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4552:	9301      	str	r3, [sp, #4]
   b4554:	bd08      	pop	{r3, pc}
   b4556:	0000      	.short	0x0000
   b4558:	00030220 	.word	0x00030220

000b455c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b03      	ldr	r3, [pc, #12]	; (b456c <system_ctrl_set_result+0x10>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4566:	9301      	str	r3, [sp, #4]
   b4568:	bd08      	pop	{r3, pc}
   b456a:	0000      	.short	0x0000
   b456c:	00030220 	.word	0x00030220

000b4570 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <network_connect+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	685b      	ldr	r3, [r3, #4]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030240 	.word	0x00030240

000b4580 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <network_connecting+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	689b      	ldr	r3, [r3, #8]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030240 	.word	0x00030240

000b4590 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <network_disconnect+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	68db      	ldr	r3, [r3, #12]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030240 	.word	0x00030240

000b45a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <network_ready+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	691b      	ldr	r3, [r3, #16]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030240 	.word	0x00030240

000b45b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <network_on+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	695b      	ldr	r3, [r3, #20]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030240 	.word	0x00030240

000b45c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <network_off+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	699b      	ldr	r3, [r3, #24]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030240 	.word	0x00030240

000b45d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <network_listen+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	69db      	ldr	r3, [r3, #28]
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030240 	.word	0x00030240

000b45e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <network_listening+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6a1b      	ldr	r3, [r3, #32]
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030240 	.word	0x00030240

000b45f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <network_set_listen_timeout+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030240 	.word	0x00030240

000b4600 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <network_get_listen_timeout+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030240 	.word	0x00030240

000b4610 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <network_is_on+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030240 	.word	0x00030240

000b4620 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <network_is_off+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030240 	.word	0x00030240

000b4630 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <spark_process+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	689b      	ldr	r3, [r3, #8]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	00030244 	.word	0x00030244

000b4640 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <spark_cloud_flag_connected+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	695b      	ldr	r3, [r3, #20]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030244 	.word	0x00030244

000b4650 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <spark_send_event+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	6a1b      	ldr	r3, [r3, #32]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030244 	.word	0x00030244

000b4660 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030244 	.word	0x00030244

000b4670 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <malloc+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	681b      	ldr	r3, [r3, #0]
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	0003021c 	.word	0x0003021c

000b4680 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <free+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	685b      	ldr	r3, [r3, #4]
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003021c 	.word	0x0003021c

000b4690 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <realloc+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	689b      	ldr	r3, [r3, #8]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003021c 	.word	0x0003021c

000b46a0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <abort+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003021c 	.word	0x0003021c

000b46b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <_malloc_r+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003021c 	.word	0x0003021c

000b46c0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <__assert_func+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	0003021c 	.word	0x0003021c

000b46d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <newlib_impure_ptr_callback+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003021c 	.word	0x0003021c

000b46e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b46e0:	2200      	movs	r2, #0
   b46e2:	6840      	ldr	r0, [r0, #4]
   b46e4:	4611      	mov	r1, r2
   b46e6:	f7ff bf7b 	b.w	b45e0 <network_listening>

000b46ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46ea:	2200      	movs	r2, #0
   b46ec:	6840      	ldr	r0, [r0, #4]
   b46ee:	4611      	mov	r1, r2
   b46f0:	f7ff bf86 	b.w	b4600 <network_get_listen_timeout>

000b46f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46f4:	6840      	ldr	r0, [r0, #4]
   b46f6:	2200      	movs	r2, #0
   b46f8:	f7ff bf7a 	b.w	b45f0 <network_set_listen_timeout>

000b46fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46fc:	6840      	ldr	r0, [r0, #4]
   b46fe:	2200      	movs	r2, #0
   b4700:	f081 0101 	eor.w	r1, r1, #1
   b4704:	f7ff bf64 	b.w	b45d0 <network_listen>

000b4708 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4708:	2300      	movs	r3, #0
   b470a:	6840      	ldr	r0, [r0, #4]
   b470c:	461a      	mov	r2, r3
   b470e:	4619      	mov	r1, r3
   b4710:	f7ff bf56 	b.w	b45c0 <network_off>

000b4714 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4714:	2300      	movs	r3, #0
   b4716:	6840      	ldr	r0, [r0, #4]
   b4718:	461a      	mov	r2, r3
   b471a:	4619      	mov	r1, r3
   b471c:	f7ff bf48 	b.w	b45b0 <network_on>

000b4720 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4720:	2200      	movs	r2, #0
   b4722:	6840      	ldr	r0, [r0, #4]
   b4724:	4611      	mov	r1, r2
   b4726:	f7ff bf3b 	b.w	b45a0 <network_ready>

000b472a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b472a:	2200      	movs	r2, #0
   b472c:	6840      	ldr	r0, [r0, #4]
   b472e:	4611      	mov	r1, r2
   b4730:	f7ff bf26 	b.w	b4580 <network_connecting>

000b4734 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4734:	6840      	ldr	r0, [r0, #4]
   b4736:	2200      	movs	r2, #0
   b4738:	2102      	movs	r1, #2
   b473a:	f7ff bf29 	b.w	b4590 <network_disconnect>

000b473e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b473e:	2300      	movs	r3, #0
   b4740:	6840      	ldr	r0, [r0, #4]
   b4742:	461a      	mov	r2, r3
   b4744:	f7ff bf14 	b.w	b4570 <network_connect>

000b4748 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4748:	4b02      	ldr	r3, [pc, #8]	; (b4754 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b474a:	2203      	movs	r2, #3
   b474c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b474e:	4a02      	ldr	r2, [pc, #8]	; (b4758 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4750:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4752:	4770      	bx	lr
   b4754:	2003e6c4 	.word	0x2003e6c4
   b4758:	000b5a48 	.word	0x000b5a48

000b475c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b475c:	4b05      	ldr	r3, [pc, #20]	; (b4774 <_GLOBAL__sub_I_System+0x18>)
   b475e:	2202      	movs	r2, #2
   b4760:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4762:	4b05      	ldr	r3, [pc, #20]	; (b4778 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4764:	4a05      	ldr	r2, [pc, #20]	; (b477c <_GLOBAL__sub_I_System+0x20>)
   b4766:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4768:	2000      	movs	r0, #0
   b476a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b476e:	f7ff becb 	b.w	b4508 <set_system_mode>
   b4772:	bf00      	nop
   b4774:	2003e6d8 	.word	0x2003e6d8
   b4778:	2003e6cc 	.word	0x2003e6cc
   b477c:	ffff0000 	.word	0xffff0000

000b4780 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4780:	b510      	push	{r4, lr}
   b4782:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4784:	f001 f8af 	bl	b58e6 <strlen>
   b4788:	3801      	subs	r0, #1
   b478a:	1823      	adds	r3, r4, r0
   b478c:	4620      	mov	r0, r4
	while(i<j){
   b478e:	4283      	cmp	r3, r0
   b4790:	d906      	bls.n	b47a0 <_Z11str_reversePc+0x20>
		c = *i;
   b4792:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4794:	7819      	ldrb	r1, [r3, #0]
   b4796:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b479a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b479e:	e7f6      	b.n	b478e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b47a0:	bd10      	pop	{r4, pc}

000b47a2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b47a2:	b570      	push	{r4, r5, r6, lr}
   b47a4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b47a6:	1e91      	subs	r1, r2, #2
   b47a8:	2922      	cmp	r1, #34	; 0x22
   b47aa:	d81d      	bhi.n	b47e8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b47ac:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b47ae:	b930      	cbnz	r0, b47be <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b47b0:	4423      	add	r3, r4
            *ptr++ = '0';
   b47b2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b47b4:	429d      	cmp	r5, r3
   b47b6:	d210      	bcs.n	b47da <ultoa+0x38>
            *ptr++ = '0';
   b47b8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b47bc:	e7fa      	b.n	b47b4 <ultoa+0x12>
            result.quot = a/radix;
   b47be:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b47c2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b47c6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b47c8:	2809      	cmp	r0, #9
                *ptr += '0';
   b47ca:	bf94      	ite	ls
   b47cc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b47ce:	3157      	addhi	r1, #87	; 0x57
   b47d0:	b2c9      	uxtb	r1, r1
   b47d2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b47d6:	4630      	mov	r0, r6
	while(a){
   b47d8:	e7e9      	b.n	b47ae <ultoa+0xc>

	*ptr = '\0';
   b47da:	2300      	movs	r3, #0
	str_reverse(buffer);
   b47dc:	4620      	mov	r0, r4
	*ptr = '\0';
   b47de:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b47e0:	f7ff ffce 	bl	b4780 <_Z11str_reversePc>
	return buffer;
   b47e4:	4620      	mov	r0, r4
}
   b47e6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b47e8:	2000      	movs	r0, #0
   b47ea:	e7fc      	b.n	b47e6 <ultoa+0x44>

000b47ec <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b47ec:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b47ee:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b47f0:	460c      	mov	r4, r1
   b47f2:	4615      	mov	r5, r2
	if(a<0){
   b47f4:	da0e      	bge.n	b4814 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b47f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b47fa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b47fe:	bf14      	ite	ne
   b4800:	4258      	negne	r0, r3
   b4802:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b4804:	2301      	movs	r3, #1
		*buffer = '-';
   b4806:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b4808:	462a      	mov	r2, r5
   b480a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b480c:	f7ff ffc9 	bl	b47a2 <ultoa>
	}
	return buffer;
}
   b4810:	4620      	mov	r0, r4
   b4812:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4814:	2301      	movs	r3, #1
   b4816:	e7f9      	b.n	b480c <itoa+0x20>

000b4818 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4818:	b510      	push	{r4, lr}
   b481a:	4604      	mov	r4, r0
{
	free(buffer);
   b481c:	6800      	ldr	r0, [r0, #0]
   b481e:	f7ff ff2f 	bl	b4680 <free>
}
   b4822:	4620      	mov	r0, r4
   b4824:	bd10      	pop	{r4, pc}

000b4826 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4826:	b510      	push	{r4, lr}
   b4828:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b482a:	6800      	ldr	r0, [r0, #0]
   b482c:	b108      	cbz	r0, b4832 <_ZN6String10invalidateEv+0xc>
   b482e:	f7ff ff27 	bl	b4680 <free>
	buffer = NULL;
   b4832:	2300      	movs	r3, #0
	capacity = len = 0;
   b4834:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4838:	6023      	str	r3, [r4, #0]
}
   b483a:	bd10      	pop	{r4, pc}

000b483c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b483c:	b538      	push	{r3, r4, r5, lr}
   b483e:	4604      	mov	r4, r0
   b4840:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4842:	6800      	ldr	r0, [r0, #0]
   b4844:	3101      	adds	r1, #1
   b4846:	f7ff ff23 	bl	b4690 <realloc>
	if (newbuffer) {
   b484a:	b110      	cbz	r0, b4852 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b484c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4850:	2001      	movs	r0, #1
	}
	return 0;
}
   b4852:	bd38      	pop	{r3, r4, r5, pc}

000b4854 <_ZN6String7reserveEj>:
{
   b4854:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4856:	6803      	ldr	r3, [r0, #0]
{
   b4858:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b485a:	b123      	cbz	r3, b4866 <_ZN6String7reserveEj+0x12>
   b485c:	6843      	ldr	r3, [r0, #4]
   b485e:	428b      	cmp	r3, r1
   b4860:	d301      	bcc.n	b4866 <_ZN6String7reserveEj+0x12>
   b4862:	2001      	movs	r0, #1
}
   b4864:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4866:	4620      	mov	r0, r4
   b4868:	f7ff ffe8 	bl	b483c <_ZN6String12changeBufferEj>
   b486c:	2800      	cmp	r0, #0
   b486e:	d0f9      	beq.n	b4864 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4870:	68a3      	ldr	r3, [r4, #8]
   b4872:	2b00      	cmp	r3, #0
   b4874:	d1f5      	bne.n	b4862 <_ZN6String7reserveEj+0xe>
   b4876:	6822      	ldr	r2, [r4, #0]
   b4878:	7013      	strb	r3, [r2, #0]
   b487a:	e7f2      	b.n	b4862 <_ZN6String7reserveEj+0xe>

000b487c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b487c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b487e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4880:	4611      	mov	r1, r2
   b4882:	9201      	str	r2, [sp, #4]
{
   b4884:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4886:	f7ff ffe5 	bl	b4854 <_ZN6String7reserveEj>
   b488a:	9a01      	ldr	r2, [sp, #4]
   b488c:	b928      	cbnz	r0, b489a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b488e:	4620      	mov	r0, r4
   b4890:	f7ff ffc9 	bl	b4826 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4894:	4620      	mov	r0, r4
   b4896:	b003      	add	sp, #12
   b4898:	bd30      	pop	{r4, r5, pc}
	len = length;
   b489a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b489c:	4629      	mov	r1, r5
   b489e:	6820      	ldr	r0, [r4, #0]
   b48a0:	f000 ffb7 	bl	b5812 <memcpy>
	buffer[len] = 0;
   b48a4:	6822      	ldr	r2, [r4, #0]
   b48a6:	68a3      	ldr	r3, [r4, #8]
   b48a8:	2100      	movs	r1, #0
   b48aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b48ac:	e7f2      	b.n	b4894 <_ZN6String4copyEPKcj+0x18>

000b48ae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b48ae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b48b0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b48b2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b48b6:	4604      	mov	r4, r0
	len = 0;
   b48b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b48ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b48bc:	b141      	cbz	r1, b48d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b48be:	4608      	mov	r0, r1
   b48c0:	9101      	str	r1, [sp, #4]
   b48c2:	f001 f810 	bl	b58e6 <strlen>
   b48c6:	9901      	ldr	r1, [sp, #4]
   b48c8:	4602      	mov	r2, r0
   b48ca:	4620      	mov	r0, r4
   b48cc:	f7ff ffd6 	bl	b487c <_ZN6String4copyEPKcj>
}
   b48d0:	4620      	mov	r0, r4
   b48d2:	b002      	add	sp, #8
   b48d4:	bd10      	pop	{r4, pc}

000b48d6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b48d6:	4288      	cmp	r0, r1
{
   b48d8:	b510      	push	{r4, lr}
   b48da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b48dc:	d005      	beq.n	b48ea <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b48de:	680b      	ldr	r3, [r1, #0]
   b48e0:	b12b      	cbz	r3, b48ee <_ZN6StringaSERKS_+0x18>
   b48e2:	688a      	ldr	r2, [r1, #8]
   b48e4:	4619      	mov	r1, r3
   b48e6:	f7ff ffc9 	bl	b487c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b48ea:	4620      	mov	r0, r4
   b48ec:	bd10      	pop	{r4, pc}
	else invalidate();
   b48ee:	f7ff ff9a 	bl	b4826 <_ZN6String10invalidateEv>
   b48f2:	e7fa      	b.n	b48ea <_ZN6StringaSERKS_+0x14>

000b48f4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b48f4:	b510      	push	{r4, lr}
	buffer = NULL;
   b48f6:	2300      	movs	r3, #0
String::String(const String &value)
   b48f8:	4604      	mov	r4, r0
	capacity = 0;
   b48fa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b48fe:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4900:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4902:	f7ff ffe8 	bl	b48d6 <_ZN6StringaSERKS_>
}
   b4906:	4620      	mov	r0, r4
   b4908:	bd10      	pop	{r4, pc}

000b490a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b490a:	b570      	push	{r4, r5, r6, lr}
   b490c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b490e:	460e      	mov	r6, r1
   b4910:	b909      	cbnz	r1, b4916 <_ZN6String6concatEPKcj+0xc>
   b4912:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4914:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4916:	b16a      	cbz	r2, b4934 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4918:	6884      	ldr	r4, [r0, #8]
   b491a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b491c:	4621      	mov	r1, r4
   b491e:	f7ff ff99 	bl	b4854 <_ZN6String7reserveEj>
   b4922:	2800      	cmp	r0, #0
   b4924:	d0f5      	beq.n	b4912 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4926:	6828      	ldr	r0, [r5, #0]
   b4928:	68ab      	ldr	r3, [r5, #8]
   b492a:	4631      	mov	r1, r6
   b492c:	4418      	add	r0, r3
   b492e:	f000 ffb5 	bl	b589c <strcpy>
	len = newlen;
   b4932:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4934:	2001      	movs	r0, #1
   b4936:	e7ed      	b.n	b4914 <_ZN6String6concatEPKcj+0xa>

000b4938 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b4938:	b513      	push	{r0, r1, r4, lr}
   b493a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b493c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b493e:	b151      	cbz	r1, b4956 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b4940:	9101      	str	r1, [sp, #4]
   b4942:	f000 ffd0 	bl	b58e6 <strlen>
   b4946:	9901      	ldr	r1, [sp, #4]
   b4948:	4602      	mov	r2, r0
   b494a:	4620      	mov	r0, r4
}
   b494c:	b002      	add	sp, #8
   b494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b4952:	f7ff bfda 	b.w	b490a <_ZN6String6concatEPKcj>
}
   b4956:	b002      	add	sp, #8
   b4958:	bd10      	pop	{r4, pc}

000b495a <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   b495a:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   b495c:	220a      	movs	r2, #10
{
   b495e:	4604      	mov	r4, r0
   b4960:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b4962:	4669      	mov	r1, sp
   b4964:	f7ff ff42 	bl	b47ec <itoa>
	return concat(buf, strlen(buf));
   b4968:	4668      	mov	r0, sp
   b496a:	f000 ffbc 	bl	b58e6 <strlen>
   b496e:	4669      	mov	r1, sp
   b4970:	4602      	mov	r2, r0
   b4972:	4620      	mov	r0, r4
   b4974:	f7ff ffc9 	bl	b490a <_ZN6String6concatEPKcj>
}
   b4978:	b002      	add	sp, #8
   b497a:	bd10      	pop	{r4, pc}

000b497c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b497c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b497e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4980:	4604      	mov	r4, r0
      if (_M_manager)
   b4982:	b113      	cbz	r3, b498a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4984:	2203      	movs	r2, #3
   b4986:	4601      	mov	r1, r0
   b4988:	4798      	blx	r3
    }
   b498a:	4620      	mov	r0, r4
   b498c:	bd10      	pop	{r4, pc}

000b498e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b498e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4990:	6843      	ldr	r3, [r0, #4]
   b4992:	3b01      	subs	r3, #1
    {
   b4994:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4996:	6043      	str	r3, [r0, #4]
   b4998:	b963      	cbnz	r3, b49b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b499a:	6803      	ldr	r3, [r0, #0]
   b499c:	689b      	ldr	r3, [r3, #8]
   b499e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b49a0:	68a3      	ldr	r3, [r4, #8]
   b49a2:	3b01      	subs	r3, #1
   b49a4:	60a3      	str	r3, [r4, #8]
   b49a6:	b92b      	cbnz	r3, b49b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b49a8:	6823      	ldr	r3, [r4, #0]
   b49aa:	4620      	mov	r0, r4
   b49ac:	68db      	ldr	r3, [r3, #12]
    }
   b49ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b49b2:	4718      	bx	r3
    }
   b49b4:	bd10      	pop	{r4, pc}

000b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b49b6:	b510      	push	{r4, lr}
   b49b8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b49ba:	6800      	ldr	r0, [r0, #0]
   b49bc:	b108      	cbz	r0, b49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b49be:	f7ff ffe6 	bl	b498e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b49c2:	4620      	mov	r0, r4
   b49c4:	bd10      	pop	{r4, pc}

000b49c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b49c6:	b513      	push	{r0, r1, r4, lr}
   b49c8:	460b      	mov	r3, r1
   b49ca:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b49cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b49d0:	466c      	mov	r4, sp
   b49d2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b49d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b49da:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b49de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b49e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b49e6:	b002      	add	sp, #8
   b49e8:	bd10      	pop	{r4, pc}
	...

000b49ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b49ec:	4802      	ldr	r0, [pc, #8]	; (b49f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b49ee:	2300      	movs	r3, #0
   b49f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b49f2:	f7ff bcb1 	b.w	b4358 <os_mutex_recursive_create>
   b49f6:	bf00      	nop
   b49f8:	2003e6dc 	.word	0x2003e6dc

000b49fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b49fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49fe:	4606      	mov	r6, r0
   b4a00:	460d      	mov	r5, r1
  size_t n = 0;
   b4a02:	188f      	adds	r7, r1, r2
   b4a04:	2400      	movs	r4, #0
  while (size--) {
   b4a06:	42bd      	cmp	r5, r7
   b4a08:	d00c      	beq.n	b4a24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4a0a:	6833      	ldr	r3, [r6, #0]
   b4a0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4a10:	689b      	ldr	r3, [r3, #8]
   b4a12:	4630      	mov	r0, r6
   b4a14:	4798      	blx	r3
     if (chunk>=0)
   b4a16:	1e03      	subs	r3, r0, #0
   b4a18:	db01      	blt.n	b4a1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4a1a:	441c      	add	r4, r3
  while (size--) {
   b4a1c:	e7f3      	b.n	b4a06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4a1e:	2c00      	cmp	r4, #0
   b4a20:	bf08      	it	eq
   b4a22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4a24:	4620      	mov	r0, r4
   b4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4a28:	b513      	push	{r0, r1, r4, lr}
   b4a2a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4a2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4a2e:	b159      	cbz	r1, b4a48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4a30:	9101      	str	r1, [sp, #4]
   b4a32:	f000 ff58 	bl	b58e6 <strlen>
   b4a36:	6823      	ldr	r3, [r4, #0]
   b4a38:	9901      	ldr	r1, [sp, #4]
   b4a3a:	68db      	ldr	r3, [r3, #12]
   b4a3c:	4602      	mov	r2, r0
   b4a3e:	4620      	mov	r0, r4
    }
   b4a40:	b002      	add	sp, #8
   b4a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4a46:	4718      	bx	r3
    }
   b4a48:	b002      	add	sp, #8
   b4a4a:	bd10      	pop	{r4, pc}

000b4a4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4a4c:	6803      	ldr	r3, [r0, #0]
   b4a4e:	689b      	ldr	r3, [r3, #8]
   b4a50:	4718      	bx	r3

000b4a52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4a52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4a54:	210d      	movs	r1, #13
{
   b4a56:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4a58:	f7ff fff8 	bl	b4a4c <_ZN5Print5printEc>
  n += print('\n');
   b4a5c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4a5e:	4604      	mov	r4, r0
  n += print('\n');
   b4a60:	4628      	mov	r0, r5
   b4a62:	f7ff fff3 	bl	b4a4c <_ZN5Print5printEc>
  return n;
}
   b4a66:	4420      	add	r0, r4
   b4a68:	bd38      	pop	{r3, r4, r5, pc}

000b4a6a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4a6a:	b538      	push	{r3, r4, r5, lr}
   b4a6c:	4605      	mov	r5, r0
  return write(str);
   b4a6e:	f7ff ffdb 	bl	b4a28 <_ZN5Print5writeEPKc>
   b4a72:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4a74:	4628      	mov	r0, r5
   b4a76:	f7ff ffec 	bl	b4a52 <_ZN5Print7printlnEv>
  return n;
}
   b4a7a:	4420      	add	r0, r4
   b4a7c:	bd38      	pop	{r3, r4, r5, pc}

000b4a7e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b4a7e:	f7ff bff4 	b.w	b4a6a <_ZN5Print7printlnEPKc>

000b4a82 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4a82:	b530      	push	{r4, r5, lr}
   b4a84:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4a86:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a88:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a8e:	bf98      	it	ls
   b4a90:	220a      	movls	r2, #10
   b4a92:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a94:	460d      	mov	r5, r1
   b4a96:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a9a:	fb01 5312 	mls	r3, r1, r2, r5
   b4a9e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4aa2:	2b09      	cmp	r3, #9
   b4aa4:	bf94      	ite	ls
   b4aa6:	3330      	addls	r3, #48	; 0x30
   b4aa8:	3337      	addhi	r3, #55	; 0x37
   b4aaa:	b2db      	uxtb	r3, r3
  } while(n);
   b4aac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4aae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4ab2:	d9ef      	bls.n	b4a94 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ab4:	4621      	mov	r1, r4
   b4ab6:	f7ff ffb7 	bl	b4a28 <_ZN5Print5writeEPKc>
}
   b4aba:	b00b      	add	sp, #44	; 0x2c
   b4abc:	bd30      	pop	{r4, r5, pc}
	...

000b4ac0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ac0:	4b01      	ldr	r3, [pc, #4]	; (b4ac8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ac2:	4a02      	ldr	r2, [pc, #8]	; (b4acc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ac4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4ac6:	4770      	bx	lr
   b4ac8:	2003e6e0 	.word	0x2003e6e0
   b4acc:	000b5a7c 	.word	0x000b5a7c

000b4ad0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4ad0:	4b02      	ldr	r3, [pc, #8]	; (b4adc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4ad2:	681a      	ldr	r2, [r3, #0]
   b4ad4:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ad6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ad8:	4770      	bx	lr
   b4ada:	bf00      	nop
   b4adc:	2003e648 	.word	0x2003e648
   b4ae0:	2003e6e4 	.word	0x2003e6e4

000b4ae4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ae4:	2100      	movs	r1, #0
   b4ae6:	f7ff bd17 	b.w	b4518 <system_delay_ms>
	...

000b4aec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4aec:	4b01      	ldr	r3, [pc, #4]	; (b4af4 <_GLOBAL__sub_I_RGB+0x8>)
   b4aee:	2200      	movs	r2, #0
   b4af0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4af2:	4770      	bx	lr
   b4af4:	2003e6e8 	.word	0x2003e6e8

000b4af8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4af8:	4b01      	ldr	r3, [pc, #4]	; (b4b00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4afa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4afc:	4770      	bx	lr
   b4afe:	bf00      	nop
   b4b00:	2003e64c 	.word	0x2003e64c

000b4b04 <serialEventRun>:
{
   b4b04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4b06:	4b0b      	ldr	r3, [pc, #44]	; (b4b34 <serialEventRun+0x30>)
   b4b08:	b143      	cbz	r3, b4b1c <serialEventRun+0x18>
   b4b0a:	f000 fbff 	bl	b530c <_Z16_fetch_usbserialv>
   b4b0e:	6803      	ldr	r3, [r0, #0]
   b4b10:	691b      	ldr	r3, [r3, #16]
   b4b12:	4798      	blx	r3
   b4b14:	2800      	cmp	r0, #0
   b4b16:	dd01      	ble.n	b4b1c <serialEventRun+0x18>
        serialEvent();
   b4b18:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4b1c:	4b06      	ldr	r3, [pc, #24]	; (b4b38 <serialEventRun+0x34>)
   b4b1e:	b143      	cbz	r3, b4b32 <serialEventRun+0x2e>
   b4b20:	f000 fe0c 	bl	b573c <_Z22__fetch_global_Serial1v>
   b4b24:	6803      	ldr	r3, [r0, #0]
   b4b26:	691b      	ldr	r3, [r3, #16]
   b4b28:	4798      	blx	r3
   b4b2a:	2800      	cmp	r0, #0
   b4b2c:	dd01      	ble.n	b4b32 <serialEventRun+0x2e>
        serialEvent1();
   b4b2e:	f3af 8000 	nop.w
}
   b4b32:	bd08      	pop	{r3, pc}
	...

000b4b3c <_post_loop>:
{
   b4b3c:	b508      	push	{r3, lr}
	serialEventRun();
   b4b3e:	f7ff ffe1 	bl	b4b04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4b42:	f7ff fc01 	bl	b4348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4b46:	4b01      	ldr	r3, [pc, #4]	; (b4b4c <_post_loop+0x10>)
   b4b48:	6018      	str	r0, [r3, #0]
}
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	2003e740 	.word	0x2003e740

000b4b50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4b50:	4805      	ldr	r0, [pc, #20]	; (b4b68 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4b52:	4a06      	ldr	r2, [pc, #24]	; (b4b6c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4b54:	4906      	ldr	r1, [pc, #24]	; (b4b70 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4b56:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4b58:	1a12      	subs	r2, r2, r0
   b4b5a:	f000 fe5a 	bl	b5812 <memcpy>
    __backup_sram_signature = signature;
   b4b5e:	4b05      	ldr	r3, [pc, #20]	; (b4b74 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4b60:	4a05      	ldr	r2, [pc, #20]	; (b4b78 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4b62:	601a      	str	r2, [r3, #0]
}
   b4b64:	bd08      	pop	{r3, pc}
   b4b66:	bf00      	nop
   b4b68:	2003f400 	.word	0x2003f400
   b4b6c:	2003f404 	.word	0x2003f404
   b4b70:	000b5cb4 	.word	0x000b5cb4
   b4b74:	2003f400 	.word	0x2003f400
   b4b78:	9a271c1e 	.word	0x9a271c1e

000b4b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4b7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4b7e:	2300      	movs	r3, #0
   b4b80:	9300      	str	r3, [sp, #0]
   b4b82:	461a      	mov	r2, r3
   b4b84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4b88:	f7ff fce8 	bl	b455c <system_ctrl_set_result>
}
   b4b8c:	b003      	add	sp, #12
   b4b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4b94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4b94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4b96:	8843      	ldrh	r3, [r0, #2]
   b4b98:	2b0a      	cmp	r3, #10
   b4b9a:	d008      	beq.n	b4bae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4b9c:	2b50      	cmp	r3, #80	; 0x50
   b4b9e:	d10b      	bne.n	b4bb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4ba0:	4b09      	ldr	r3, [pc, #36]	; (b4bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4ba2:	681b      	ldr	r3, [r3, #0]
   b4ba4:	b14b      	cbz	r3, b4bba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4ba6:	b003      	add	sp, #12
   b4ba8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4bac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4bae:	f7ff ffe5 	bl	b4b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4bb2:	b003      	add	sp, #12
   b4bb4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4bb8:	2300      	movs	r3, #0
   b4bba:	9300      	str	r3, [sp, #0]
   b4bbc:	461a      	mov	r2, r3
   b4bbe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4bc2:	f7ff fccb 	bl	b455c <system_ctrl_set_result>
}
   b4bc6:	e7f4      	b.n	b4bb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4bc8:	2003e6fc 	.word	0x2003e6fc

000b4bcc <module_user_init_hook>:
{
   b4bcc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4bce:	4812      	ldr	r0, [pc, #72]	; (b4c18 <module_user_init_hook+0x4c>)
   b4bd0:	2100      	movs	r1, #0
   b4bd2:	f7ff fd7d 	bl	b46d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4bd6:	4b11      	ldr	r3, [pc, #68]	; (b4c1c <module_user_init_hook+0x50>)
   b4bd8:	681a      	ldr	r2, [r3, #0]
   b4bda:	4b11      	ldr	r3, [pc, #68]	; (b4c20 <module_user_init_hook+0x54>)
   b4bdc:	429a      	cmp	r2, r3
   b4bde:	4b11      	ldr	r3, [pc, #68]	; (b4c24 <module_user_init_hook+0x58>)
   b4be0:	bf0c      	ite	eq
   b4be2:	2201      	moveq	r2, #1
   b4be4:	2200      	movne	r2, #0
   b4be6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4be8:	d001      	beq.n	b4bee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4bea:	f7ff ffb1 	bl	b4b50 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4bee:	f7ff fba3 	bl	b4338 <HAL_RNG_GetRandomNumber>
   b4bf2:	4604      	mov	r4, r0
    srand(seed);
   b4bf4:	f000 fe24 	bl	b5840 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4bf8:	4b0b      	ldr	r3, [pc, #44]	; (b4c28 <module_user_init_hook+0x5c>)
   b4bfa:	b113      	cbz	r3, b4c02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4c02:	2100      	movs	r1, #0
   b4c04:	4808      	ldr	r0, [pc, #32]	; (b4c28 <module_user_init_hook+0x5c>)
   b4c06:	f7ff fd2b 	bl	b4660 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4c0e:	4807      	ldr	r0, [pc, #28]	; (b4c2c <module_user_init_hook+0x60>)
   b4c10:	2100      	movs	r1, #0
   b4c12:	f7ff bc99 	b.w	b4548 <system_ctrl_set_app_request_handler>
   b4c16:	bf00      	nop
   b4c18:	000b4af9 	.word	0x000b4af9
   b4c1c:	2003f400 	.word	0x2003f400
   b4c20:	9a271c1e 	.word	0x9a271c1e
   b4c24:	2003e6f8 	.word	0x2003e6f8
   b4c28:	00000000 	.word	0x00000000
   b4c2c:	000b4b95 	.word	0x000b4b95

000b4c30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4c30:	4770      	bx	lr

000b4c32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4c32:	2000      	movs	r0, #0
   b4c34:	4770      	bx	lr

000b4c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4c36:	b510      	push	{r4, lr}
   b4c38:	2110      	movs	r1, #16
   b4c3a:	4604      	mov	r4, r0
   b4c3c:	f7ff fa2d 	bl	b409a <_ZdlPvj>
   b4c40:	4620      	mov	r0, r4
   b4c42:	bd10      	pop	{r4, pc}

000b4c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4c44:	b508      	push	{r3, lr}
      { delete this; }
   b4c46:	f7ff fff6 	bl	b4c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4c4a:	bd08      	pop	{r3, pc}

000b4c4c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4c4c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4c4e:	2200      	movs	r2, #0
   b4c50:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4c54:	6002      	str	r2, [r0, #0]
   b4c56:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4c58:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c5a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4c5c:	680c      	ldr	r4, [r1, #0]
   b4c5e:	8085      	strh	r5, [r0, #4]
   b4c60:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c62:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4c64:	bd30      	pop	{r4, r5, pc}

000b4c66 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4c66:	b510      	push	{r4, lr}
   b4c68:	4604      	mov	r4, r0
    free((void*)msg_);
   b4c6a:	6800      	ldr	r0, [r0, #0]
   b4c6c:	f7ff fd08 	bl	b4680 <free>
}
   b4c70:	4620      	mov	r0, r4
   b4c72:	bd10      	pop	{r4, pc}

000b4c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4c74:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4c76:	68c4      	ldr	r4, [r0, #12]
   b4c78:	b1f4      	cbz	r4, b4cb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b4c7a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4c7c:	2b02      	cmp	r3, #2
   b4c7e:	d103      	bne.n	b4c88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4c80:	f104 000c 	add.w	r0, r4, #12
   b4c84:	f7ff ffef 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4c88:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4c8a:	b135      	cbz	r5, b4c9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4c8c:	4628      	mov	r0, r5
   b4c8e:	f7ff fe75 	bl	b497c <_ZNSt14_Function_baseD1Ev>
   b4c92:	2110      	movs	r1, #16
   b4c94:	4628      	mov	r0, r5
   b4c96:	f7ff fa00 	bl	b409a <_ZdlPvj>
   b4c9a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4c9c:	b135      	cbz	r5, b4cac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4c9e:	4628      	mov	r0, r5
   b4ca0:	f7ff fe6c 	bl	b497c <_ZNSt14_Function_baseD1Ev>
   b4ca4:	2110      	movs	r1, #16
   b4ca6:	4628      	mov	r0, r5
   b4ca8:	f7ff f9f7 	bl	b409a <_ZdlPvj>
   b4cac:	4620      	mov	r0, r4
   b4cae:	2114      	movs	r1, #20
   b4cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4cb4:	f7ff b9f1 	b.w	b409a <_ZdlPvj>
   b4cb8:	bd38      	pop	{r3, r4, r5, pc}

000b4cba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4cba:	680b      	ldr	r3, [r1, #0]
   b4cbc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4cbe:	684b      	ldr	r3, [r1, #4]
   b4cc0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4cc2:	b113      	cbz	r3, b4cca <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4cc4:	685a      	ldr	r2, [r3, #4]
   b4cc6:	3201      	adds	r2, #1
   b4cc8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4cca:	4770      	bx	lr

000b4ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4cce:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4cd0:	4668      	mov	r0, sp
   b4cd2:	460d      	mov	r5, r1
   b4cd4:	f7ff fff1 	bl	b4cba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4cd8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4cda:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4cdc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4cde:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4ce0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4ce2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4ce4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b4ce6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4ce8:	f7ff fe65 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4cec:	b135      	cbz	r5, b4cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4cee:	1d28      	adds	r0, r5, #4
   b4cf0:	f7ff fe61 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4cf4:	2108      	movs	r1, #8
   b4cf6:	4628      	mov	r0, r5
   b4cf8:	f7ff f9cf 	bl	b409a <_ZdlPvj>
        return p;
    }
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	b003      	add	sp, #12
   b4d00:	bd30      	pop	{r4, r5, pc}

000b4d02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4d02:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4d04:	b510      	push	{r4, lr}
      if (_M_empty())
   b4d06:	b90a      	cbnz	r2, b4d0c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4d08:	f000 fd7a 	bl	b5800 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b4d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4d10:	68c3      	ldr	r3, [r0, #12]
   b4d12:	4718      	bx	r3

000b4d14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4d14:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4d16:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4d18:	f100 0110 	add.w	r1, r0, #16
   b4d1c:	f7ff fff1 	bl	b4d02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4d20:	bd08      	pop	{r3, pc}

000b4d22 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4d22:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4d24:	b510      	push	{r4, lr}
      if (_M_empty())
   b4d26:	b90a      	cbnz	r2, b4d2c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4d28:	f000 fd6a 	bl	b5800 <_ZSt25__throw_bad_function_callv>
    }
   b4d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4d30:	68c3      	ldr	r3, [r0, #12]
   b4d32:	4718      	bx	r3

000b4d34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4d34:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4d36:	6800      	ldr	r0, [r0, #0]
   b4d38:	f100 0110 	add.w	r1, r0, #16
   b4d3c:	f7ff fff1 	bl	b4d22 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4d40:	bd08      	pop	{r3, pc}
	...

000b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4d44:	b538      	push	{r3, r4, r5, lr}
   b4d46:	2300      	movs	r3, #0
   b4d48:	4604      	mov	r4, r0
   b4d4a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4d4c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4d4e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4d50:	f7ff f99f 	bl	b4092 <_Znwj>
   b4d54:	b128      	cbz	r0, b4d62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4d56:	2301      	movs	r3, #1
   b4d58:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4d5c:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4d5e:	6003      	str	r3, [r0, #0]
   b4d60:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4d62:	6020      	str	r0, [r4, #0]
	}
   b4d64:	4620      	mov	r0, r4
   b4d66:	bd38      	pop	{r3, r4, r5, pc}
   b4d68:	000b5aa4 	.word	0x000b5aa4

000b4d6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4d6c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4d6e:	2300      	movs	r3, #0
   b4d70:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4d72:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4d74:	4604      	mov	r4, r0
   b4d76:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4d78:	b12b      	cbz	r3, b4d86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4d7a:	2202      	movs	r2, #2
   b4d7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4d7e:	68eb      	ldr	r3, [r5, #12]
   b4d80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4d82:	68ab      	ldr	r3, [r5, #8]
   b4d84:	60a3      	str	r3, [r4, #8]
    }
   b4d86:	4620      	mov	r0, r4
   b4d88:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4d8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4d8e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b4d90:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4d92:	4668      	mov	r0, sp
   b4d94:	f7ff ff5a 	bl	b4c4c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4d98:	f04f 0302 	mov.w	r3, #2
   b4d9c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4da0:	2a00      	cmp	r2, #0
   b4da2:	d103      	bne.n	b4dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4da4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4da8:	2900      	cmp	r1, #0
   b4daa:	d1f7      	bne.n	b4d9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4dac:	d125      	bne.n	b4dfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4dae:	f104 050c 	add.w	r5, r4, #12
   b4db2:	4669      	mov	r1, sp
   b4db4:	4628      	mov	r0, r5
   b4db6:	f7ff ff49 	bl	b4c4c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4dba:	f3bf 8f5b 	dmb	ish
   b4dbe:	2301      	movs	r3, #1
   b4dc0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4dc2:	2000      	movs	r0, #0
   b4dc4:	f104 0308 	add.w	r3, r4, #8
   b4dc8:	f3bf 8f5b 	dmb	ish
   b4dcc:	e853 6f00 	ldrex	r6, [r3]
   b4dd0:	e843 0200 	strex	r2, r0, [r3]
   b4dd4:	2a00      	cmp	r2, #0
   b4dd6:	d1f9      	bne.n	b4dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4dd8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4ddc:	b16e      	cbz	r6, b4dfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4dde:	f7ff fba3 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4de2:	b178      	cbz	r0, b4e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4de4:	4629      	mov	r1, r5
   b4de6:	4630      	mov	r0, r6
   b4de8:	f7ff ff8b 	bl	b4d02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4dec:	4630      	mov	r0, r6
   b4dee:	f7ff fdc5 	bl	b497c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4df2:	2110      	movs	r1, #16
   b4df4:	4630      	mov	r0, r6
   b4df6:	f7ff f950 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4dfa:	4668      	mov	r0, sp
   b4dfc:	f7ff ff33 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
    }
   b4e00:	b009      	add	sp, #36	; 0x24
   b4e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4e04:	4631      	mov	r1, r6
   b4e06:	a802      	add	r0, sp, #8
   b4e08:	f7ff ffb0 	bl	b4d6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4e0c:	68e0      	ldr	r0, [r4, #12]
   b4e0e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4e12:	b108      	cbz	r0, b4e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4e14:	f000 fd4a 	bl	b58ac <strdup>
        type_(type) {
   b4e18:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4e1a:	2010      	movs	r0, #16
   b4e1c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4e20:	f7ff f937 	bl	b4092 <_Znwj>
   b4e24:	4605      	mov	r5, r0
   b4e26:	b1e8      	cbz	r0, b4e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4e28:	2700      	movs	r7, #0
   b4e2a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4e2c:	2018      	movs	r0, #24
   b4e2e:	f7ff f930 	bl	b4092 <_Znwj>
   b4e32:	4604      	mov	r4, r0
   b4e34:	b188      	cbz	r0, b4e5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4e36:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4e38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4e3a:	a802      	add	r0, sp, #8
   b4e3c:	f7ff fdc3 	bl	b49c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4e42:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e44:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e46:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4e48:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4e4a:	a906      	add	r1, sp, #24
   b4e4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e4e:	60e3      	str	r3, [r4, #12]
   b4e50:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4e54:	9205      	str	r2, [sp, #20]
   b4e56:	f7ff fef9 	bl	b4c4c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4e5a:	4b08      	ldr	r3, [pc, #32]	; (b4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4e5c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4e5e:	4b08      	ldr	r3, [pc, #32]	; (b4e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4e60:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4e62:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4e64:	a806      	add	r0, sp, #24
   b4e66:	f7ff fefe 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4e6a:	a802      	add	r0, sp, #8
   b4e6c:	f7ff fd86 	bl	b497c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4e70:	2200      	movs	r2, #0
   b4e72:	4629      	mov	r1, r5
   b4e74:	4803      	ldr	r0, [pc, #12]	; (b4e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4e76:	f7ff fb5f 	bl	b4538 <application_thread_invoke>
   b4e7a:	e7b7      	b.n	b4dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4e7c:	000b4d15 	.word	0x000b4d15
   b4e80:	000b4f99 	.word	0x000b4f99
   b4e84:	000b53fd 	.word	0x000b53fd

000b4e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e8c:	b08b      	sub	sp, #44	; 0x2c
   b4e8e:	4605      	mov	r5, r0
   b4e90:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4e94:	460f      	mov	r7, r1
   b4e96:	4690      	mov	r8, r2
   b4e98:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e9a:	f7ff fbd1 	bl	b4640 <spark_cloud_flag_connected>
   b4e9e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4ea0:	4683      	mov	fp, r0
   b4ea2:	bb38      	cbnz	r0, b4ef4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4ea4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4ea8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4eaa:	a905      	add	r1, sp, #20
   b4eac:	4630      	mov	r0, r6
   b4eae:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4eb2:	f7ff fecb 	bl	b4c4c <_ZN8particle5ErrorC1EOS0_>
   b4eb6:	2014      	movs	r0, #20
   b4eb8:	f7ff f8eb 	bl	b4092 <_Znwj>
   b4ebc:	4604      	mov	r4, r0
   b4ebe:	b148      	cbz	r0, b4ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4ec0:	2302      	movs	r3, #2
   b4ec2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4ec4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4ec6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4eca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4ecc:	4631      	mov	r1, r6
   b4ece:	300c      	adds	r0, #12
   b4ed0:	f7ff febc 	bl	b4c4c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4ed4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4ed6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4ed8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4edc:	f7ff ff32 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4ee0:	4630      	mov	r0, r6
   b4ee2:	f7ff fec0 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4ee6:	a805      	add	r0, sp, #20
   b4ee8:	f7ff febd 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4eec:	4628      	mov	r0, r5
   b4eee:	b00b      	add	sp, #44	; 0x2c
   b4ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4ef4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4ef6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4ef8:	2014      	movs	r0, #20
   b4efa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4efe:	9307      	str	r3, [sp, #28]
   b4f00:	f7ff f8c7 	bl	b4092 <_Znwj>
   b4f04:	4601      	mov	r1, r0
   b4f06:	b118      	cbz	r0, b4f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4f0c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4f0e:	7044      	strb	r4, [r0, #1]
   b4f10:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4f12:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4f14:	f7ff ff16 	bl	b4d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4f18:	4b1e      	ldr	r3, [pc, #120]	; (b4f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4f1a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4f1c:	2008      	movs	r0, #8
   b4f1e:	f7ff f8b8 	bl	b4092 <_Znwj>
   b4f22:	4604      	mov	r4, r0
   b4f24:	b110      	cbz	r0, b4f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4f26:	a903      	add	r1, sp, #12
   b4f28:	f7ff fec7 	bl	b4cba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4f2c:	9600      	str	r6, [sp, #0]
   b4f2e:	fa5f f38a 	uxtb.w	r3, sl
   b4f32:	464a      	mov	r2, r9
   b4f34:	4641      	mov	r1, r8
   b4f36:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4f38:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4f3a:	f7ff fb89 	bl	b4650 <spark_send_event>
   b4f3e:	b9b8      	cbnz	r0, b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4f40:	9b03      	ldr	r3, [sp, #12]
   b4f42:	785b      	ldrb	r3, [r3, #1]
   b4f44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4f48:	b993      	cbnz	r3, b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4f4a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4f4e:	a905      	add	r1, sp, #20
   b4f50:	a803      	add	r0, sp, #12
   b4f52:	9205      	str	r2, [sp, #20]
   b4f54:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4f58:	f7ff ff18 	bl	b4d8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4f5c:	a805      	add	r0, sp, #20
   b4f5e:	f7ff fe82 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4f62:	a805      	add	r0, sp, #20
   b4f64:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4f66:	f7ff feb1 	bl	b4ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4f6a:	a806      	add	r0, sp, #24
   b4f6c:	f7ff fd23 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f70:	a903      	add	r1, sp, #12
   b4f72:	a805      	add	r0, sp, #20
   b4f74:	f7ff fea1 	bl	b4cba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4f78:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4f7a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4f7c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4f7e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4f80:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4f82:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4f84:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4f86:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4f88:	f7ff fd15 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4f8c:	a804      	add	r0, sp, #16
   b4f8e:	f7ff fd12 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4f92:	e7ab      	b.n	b4eec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4f94:	000b5015 	.word	0x000b5015

000b4f98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4f98:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f9c:	4605      	mov	r5, r0
	switch (__op)
   b4f9e:	d103      	bne.n	b4fa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4fa0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4fa2:	6003      	str	r3, [r0, #0]
      }
   b4fa4:	2000      	movs	r0, #0
   b4fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4fa8:	2a02      	cmp	r2, #2
   b4faa:	d010      	beq.n	b4fce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4fac:	2a03      	cmp	r2, #3
   b4fae:	d1f9      	bne.n	b4fa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4fb0:	6804      	ldr	r4, [r0, #0]
   b4fb2:	2c00      	cmp	r4, #0
   b4fb4:	d0f6      	beq.n	b4fa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4fb6:	f104 0010 	add.w	r0, r4, #16
   b4fba:	f7ff fe54 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4fbe:	4620      	mov	r0, r4
   b4fc0:	f7ff fcdc 	bl	b497c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4fc4:	2118      	movs	r1, #24
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f7ff f867 	bl	b409a <_ZdlPvj>
   b4fcc:	e7ea      	b.n	b4fa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fce:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4fd0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fd2:	f7ff f85e 	bl	b4092 <_Znwj>
   b4fd6:	4604      	mov	r4, r0
   b4fd8:	b150      	cbz	r0, b4ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4fda:	4631      	mov	r1, r6
   b4fdc:	f7ff fec6 	bl	b4d6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4fe0:	6930      	ldr	r0, [r6, #16]
   b4fe2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4fe6:	b108      	cbz	r0, b4fec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4fe8:	f000 fc60 	bl	b58ac <strdup>
        type_(type) {
   b4fec:	6120      	str	r0, [r4, #16]
   b4fee:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4ff0:	602c      	str	r4, [r5, #0]
	}
   b4ff2:	e7d7      	b.n	b4fa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4ff4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4ff4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4ff6:	2300      	movs	r3, #0
   b4ff8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4ffa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4ffc:	4604      	mov	r4, r0
   b4ffe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5000:	b12b      	cbz	r3, b500e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5002:	2202      	movs	r2, #2
   b5004:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5006:	68eb      	ldr	r3, [r5, #12]
   b5008:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b500a:	68ab      	ldr	r3, [r5, #8]
   b500c:	60a3      	str	r3, [r4, #8]
    }
   b500e:	4620      	mov	r0, r4
   b5010:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5014:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5016:	b089      	sub	sp, #36	; 0x24
   b5018:	4604      	mov	r4, r0
   b501a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b501c:	a801      	add	r0, sp, #4
   b501e:	4611      	mov	r1, r2
   b5020:	f7ff fe54 	bl	b4ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5024:	b1a4      	cbz	r4, b5050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5026:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5028:	b11d      	cbz	r5, b5032 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b502a:	4628      	mov	r0, r5
   b502c:	f000 fc3e 	bl	b58ac <strdup>
   b5030:	4605      	mov	r5, r0
   b5032:	a801      	add	r0, sp, #4
   b5034:	a903      	add	r1, sp, #12
        type_(type) {
   b5036:	9503      	str	r5, [sp, #12]
   b5038:	f8ad 4010 	strh.w	r4, [sp, #16]
   b503c:	f7ff fea6 	bl	b4d8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5040:	a803      	add	r0, sp, #12
   b5042:	f7ff fe10 	bl	b4c66 <_ZN8particle5ErrorD1Ev>
   b5046:	a802      	add	r0, sp, #8
   b5048:	f7ff fcb5 	bl	b49b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b504c:	b009      	add	sp, #36	; 0x24
   b504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5050:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5052:	2301      	movs	r3, #1
   b5054:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5058:	2a00      	cmp	r2, #0
   b505a:	d103      	bne.n	b5064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b505c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5060:	2900      	cmp	r1, #0
   b5062:	d1f7      	bne.n	b5054 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5064:	d1ef      	bne.n	b5046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5066:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5068:	f3bf 8f5b 	dmb	ish
   b506c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b506e:	1d2b      	adds	r3, r5, #4
   b5070:	f3bf 8f5b 	dmb	ish
   b5074:	e853 6f00 	ldrex	r6, [r3]
   b5078:	e843 4200 	strex	r2, r4, [r3]
   b507c:	2a00      	cmp	r2, #0
   b507e:	d1f9      	bne.n	b5074 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5080:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5084:	2e00      	cmp	r6, #0
   b5086:	d0de      	beq.n	b5046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5088:	4620      	mov	r0, r4
   b508a:	f7ff fa4d 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b508e:	4607      	mov	r7, r0
   b5090:	b160      	cbz	r0, b50ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5092:	f105 010c 	add.w	r1, r5, #12
   b5096:	4630      	mov	r0, r6
   b5098:	f7ff fe43 	bl	b4d22 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b509c:	4630      	mov	r0, r6
   b509e:	f7ff fc6d 	bl	b497c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b50a2:	2110      	movs	r1, #16
   b50a4:	4630      	mov	r0, r6
   b50a6:	f7fe fff8 	bl	b409a <_ZdlPvj>
   b50aa:	e7cc      	b.n	b5046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b50ac:	4631      	mov	r1, r6
   b50ae:	a803      	add	r0, sp, #12
   b50b0:	f7ff ffa0 	bl	b4ff4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b50b4:	7b2b      	ldrb	r3, [r5, #12]
   b50b6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b50ba:	2010      	movs	r0, #16
   b50bc:	f7fe ffe9 	bl	b4092 <_Znwj>
   b50c0:	4605      	mov	r5, r0
   b50c2:	b1d0      	cbz	r0, b50fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b50c4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50c6:	2014      	movs	r0, #20
   b50c8:	f7fe ffe3 	bl	b4092 <_Znwj>
   b50cc:	4604      	mov	r4, r0
   b50ce:	b178      	cbz	r0, b50f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b50d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b50d2:	4601      	mov	r1, r0
   b50d4:	a803      	add	r0, sp, #12
   b50d6:	f7ff fc76 	bl	b49c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b50dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b50de:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50e0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b50e2:	9205      	str	r2, [sp, #20]
   b50e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b50e6:	60e3      	str	r3, [r4, #12]
   b50e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b50ec:	9206      	str	r2, [sp, #24]
   b50ee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b50f0:	4b06      	ldr	r3, [pc, #24]	; (b510c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b50f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b50f4:	4b06      	ldr	r3, [pc, #24]	; (b5110 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b50f6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b50f8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b50fa:	a803      	add	r0, sp, #12
   b50fc:	f7ff fc3e 	bl	b497c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5100:	2200      	movs	r2, #0
   b5102:	4629      	mov	r1, r5
   b5104:	4803      	ldr	r0, [pc, #12]	; (b5114 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5106:	f7ff fa17 	bl	b4538 <application_thread_invoke>
   b510a:	e7c7      	b.n	b509c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b510c:	000b4d35 	.word	0x000b4d35
   b5110:	000b5119 	.word	0x000b5119
   b5114:	000b53fd 	.word	0x000b53fd

000b5118 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5118:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b511a:	b570      	push	{r4, r5, r6, lr}
   b511c:	4604      	mov	r4, r0
	switch (__op)
   b511e:	d103      	bne.n	b5128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5120:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5122:	6003      	str	r3, [r0, #0]
      }
   b5124:	2000      	movs	r0, #0
   b5126:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5128:	2a02      	cmp	r2, #2
   b512a:	d00c      	beq.n	b5146 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b512c:	2a03      	cmp	r2, #3
   b512e:	d1f9      	bne.n	b5124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5130:	6804      	ldr	r4, [r0, #0]
   b5132:	2c00      	cmp	r4, #0
   b5134:	d0f6      	beq.n	b5124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5136:	4620      	mov	r0, r4
   b5138:	f7ff fc20 	bl	b497c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b513c:	2114      	movs	r1, #20
   b513e:	4620      	mov	r0, r4
   b5140:	f7fe ffab 	bl	b409a <_ZdlPvj>
   b5144:	e7ee      	b.n	b5124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5146:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5148:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b514a:	f7fe ffa2 	bl	b4092 <_Znwj>
   b514e:	4605      	mov	r5, r0
   b5150:	b120      	cbz	r0, b515c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5152:	4631      	mov	r1, r6
   b5154:	f7ff ff4e 	bl	b4ff4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5158:	7c33      	ldrb	r3, [r6, #16]
   b515a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b515c:	6025      	str	r5, [r4, #0]
	}
   b515e:	e7e1      	b.n	b5124 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5160 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5160:	4770      	bx	lr

000b5162 <_ZN9IPAddressD0Ev>:
   b5162:	b510      	push	{r4, lr}
   b5164:	2118      	movs	r1, #24
   b5166:	4604      	mov	r4, r0
   b5168:	f7fe ff97 	bl	b409a <_ZdlPvj>
   b516c:	4620      	mov	r0, r4
   b516e:	bd10      	pop	{r4, pc}

000b5170 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5170:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5172:	7d03      	ldrb	r3, [r0, #20]
   b5174:	2b06      	cmp	r3, #6
{
   b5176:	b08d      	sub	sp, #52	; 0x34
   b5178:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b517a:	f100 0704 	add.w	r7, r0, #4
   b517e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5182:	d012      	beq.n	b51aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b5184:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5188:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b518c:	220a      	movs	r2, #10
   b518e:	4630      	mov	r0, r6
   b5190:	f7ff fc77 	bl	b4a82 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5194:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5196:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5198:	d019      	beq.n	b51ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b519a:	2c00      	cmp	r4, #0
   b519c:	d0f4      	beq.n	b5188 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b519e:	212e      	movs	r1, #46	; 0x2e
   b51a0:	4630      	mov	r0, r6
   b51a2:	f7ff fc53 	bl	b4a4c <_ZN5Print5printEc>
   b51a6:	4404      	add	r4, r0
   b51a8:	e7ee      	b.n	b5188 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51aa:	232f      	movs	r3, #47	; 0x2f
   b51ac:	466a      	mov	r2, sp
   b51ae:	4639      	mov	r1, r7
   b51b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b51b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51b6:	f7ff f8d7 	bl	b4368 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b51ba:	4668      	mov	r0, sp
   b51bc:	f000 fb93 	bl	b58e6 <strlen>
   b51c0:	6833      	ldr	r3, [r6, #0]
   b51c2:	4602      	mov	r2, r0
   b51c4:	68db      	ldr	r3, [r3, #12]
   b51c6:	4669      	mov	r1, sp
   b51c8:	4630      	mov	r0, r6
   b51ca:	4798      	blx	r3
   b51cc:	4604      	mov	r4, r0
    }
    return n;
}
   b51ce:	4620      	mov	r0, r4
   b51d0:	b00d      	add	sp, #52	; 0x34
   b51d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b51d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b51d4:	b510      	push	{r4, lr}
   b51d6:	4b05      	ldr	r3, [pc, #20]	; (b51ec <_ZN9IPAddressC1Ev+0x18>)
   b51d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b51da:	2211      	movs	r2, #17
   b51dc:	f840 3b04 	str.w	r3, [r0], #4
   b51e0:	2100      	movs	r1, #0
   b51e2:	f000 fb24 	bl	b582e <memset>
}
   b51e6:	4620      	mov	r0, r4
   b51e8:	bd10      	pop	{r4, pc}
   b51ea:	bf00      	nop
   b51ec:	000b5ac0 	.word	0x000b5ac0

000b51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b51f0:	4603      	mov	r3, r0
   b51f2:	4a07      	ldr	r2, [pc, #28]	; (b5210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b51f4:	b510      	push	{r4, lr}
   b51f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b51fa:	f101 0210 	add.w	r2, r1, #16
   b51fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5202:	f843 4b04 	str.w	r4, [r3], #4
   b5206:	4291      	cmp	r1, r2
   b5208:	d1f9      	bne.n	b51fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b520a:	780a      	ldrb	r2, [r1, #0]
   b520c:	701a      	strb	r2, [r3, #0]
}
   b520e:	bd10      	pop	{r4, pc}
   b5210:	000b5ac0 	.word	0x000b5ac0

000b5214 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5214:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5216:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b521a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b521e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5222:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5226:	2304      	movs	r3, #4
   b5228:	6041      	str	r1, [r0, #4]
   b522a:	7503      	strb	r3, [r0, #20]
}
   b522c:	bd10      	pop	{r4, pc}
	...

000b5230 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5230:	b507      	push	{r0, r1, r2, lr}
   b5232:	4b06      	ldr	r3, [pc, #24]	; (b524c <_ZN9IPAddressC1EPKh+0x1c>)
   b5234:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5236:	78cb      	ldrb	r3, [r1, #3]
   b5238:	9300      	str	r3, [sp, #0]
   b523a:	788b      	ldrb	r3, [r1, #2]
   b523c:	784a      	ldrb	r2, [r1, #1]
   b523e:	7809      	ldrb	r1, [r1, #0]
   b5240:	f7ff ffe8 	bl	b5214 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5244:	b003      	add	sp, #12
   b5246:	f85d fb04 	ldr.w	pc, [sp], #4
   b524a:	bf00      	nop
   b524c:	000b5ac0 	.word	0x000b5ac0

000b5250 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5250:	7441      	strb	r1, [r0, #17]
}
   b5252:	4770      	bx	lr

000b5254 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5254:	4770      	bx	lr

000b5256 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5256:	4770      	bx	lr

000b5258 <_ZN9USBSerial4readEv>:
{
   b5258:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b525a:	2100      	movs	r1, #0
   b525c:	7c00      	ldrb	r0, [r0, #16]
   b525e:	f7ff f93b 	bl	b44d8 <HAL_USB_USART_Receive_Data>
}
   b5262:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5266:	bd08      	pop	{r3, pc}

000b5268 <_ZN9USBSerial4peekEv>:
{
   b5268:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b526a:	2101      	movs	r1, #1
   b526c:	7c00      	ldrb	r0, [r0, #16]
   b526e:	f7ff f933 	bl	b44d8 <HAL_USB_USART_Receive_Data>
}
   b5272:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5276:	bd08      	pop	{r3, pc}

000b5278 <_ZN9USBSerial17availableForWriteEv>:
{
   b5278:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b527a:	7c00      	ldrb	r0, [r0, #16]
   b527c:	f7ff f924 	bl	b44c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5280:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5284:	bd08      	pop	{r3, pc}

000b5286 <_ZN9USBSerial9availableEv>:
{
   b5286:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5288:	7c00      	ldrb	r0, [r0, #16]
   b528a:	f7ff f915 	bl	b44b8 <HAL_USB_USART_Available_Data>
}
   b528e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5292:	bd08      	pop	{r3, pc}

000b5294 <_ZN9USBSerial5writeEh>:
{
   b5294:	b513      	push	{r0, r1, r4, lr}
   b5296:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5298:	7c00      	ldrb	r0, [r0, #16]
{
   b529a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b529c:	f7ff f914 	bl	b44c8 <HAL_USB_USART_Available_Data_For_Write>
   b52a0:	2800      	cmp	r0, #0
   b52a2:	9901      	ldr	r1, [sp, #4]
   b52a4:	dc01      	bgt.n	b52aa <_ZN9USBSerial5writeEh+0x16>
   b52a6:	7c60      	ldrb	r0, [r4, #17]
   b52a8:	b120      	cbz	r0, b52b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b52aa:	7c20      	ldrb	r0, [r4, #16]
   b52ac:	f7ff f91c 	bl	b44e8 <HAL_USB_USART_Send_Data>
   b52b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b52b4:	b002      	add	sp, #8
   b52b6:	bd10      	pop	{r4, pc}

000b52b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b52b8:	7c00      	ldrb	r0, [r0, #16]
   b52ba:	f7ff b91d 	b.w	b44f8 <HAL_USB_USART_Flush_Data>

000b52be <_ZN9USBSerialD0Ev>:
   b52be:	b510      	push	{r4, lr}
   b52c0:	2114      	movs	r1, #20
   b52c2:	4604      	mov	r4, r0
   b52c4:	f7fe fee9 	bl	b409a <_ZdlPvj>
   b52c8:	4620      	mov	r0, r4
   b52ca:	bd10      	pop	{r4, pc}

000b52cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b52cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b52ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52d2:	4604      	mov	r4, r0
   b52d4:	4608      	mov	r0, r1
   b52d6:	2100      	movs	r1, #0
   b52d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b52dc:	4b04      	ldr	r3, [pc, #16]	; (b52f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b52de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b52e0:	2301      	movs	r3, #1
  _serial = serial;
   b52e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b52e6:	4611      	mov	r1, r2
   b52e8:	f7ff f8d6 	bl	b4498 <HAL_USB_USART_Init>
}
   b52ec:	4620      	mov	r0, r4
   b52ee:	bd10      	pop	{r4, pc}
   b52f0:	000b5ad4 	.word	0x000b5ad4

000b52f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b52f4:	7c00      	ldrb	r0, [r0, #16]
   b52f6:	2200      	movs	r2, #0
   b52f8:	f7ff b8d6 	b.w	b44a8 <HAL_USB_USART_Begin>

000b52fc <_Z19acquireSerialBufferv>:
{
   b52fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b52fe:	2214      	movs	r2, #20
{
   b5300:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5302:	2100      	movs	r1, #0
   b5304:	f000 fa93 	bl	b582e <memset>
}
   b5308:	4620      	mov	r0, r4
   b530a:	bd10      	pop	{r4, pc}

000b530c <_Z16_fetch_usbserialv>:
{
   b530c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b530e:	4c0f      	ldr	r4, [pc, #60]	; (b534c <_Z16_fetch_usbserialv+0x40>)
{
   b5310:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5312:	a803      	add	r0, sp, #12
   b5314:	f7ff fff2 	bl	b52fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5318:	7821      	ldrb	r1, [r4, #0]
   b531a:	f3bf 8f5b 	dmb	ish
   b531e:	f011 0101 	ands.w	r1, r1, #1
   b5322:	d10f      	bne.n	b5344 <_Z16_fetch_usbserialv+0x38>
   b5324:	4620      	mov	r0, r4
   b5326:	9101      	str	r1, [sp, #4]
   b5328:	f7fe feb9 	bl	b409e <__cxa_guard_acquire>
   b532c:	9901      	ldr	r1, [sp, #4]
   b532e:	b148      	cbz	r0, b5344 <_Z16_fetch_usbserialv+0x38>
   b5330:	aa03      	add	r2, sp, #12
   b5332:	4807      	ldr	r0, [pc, #28]	; (b5350 <_Z16_fetch_usbserialv+0x44>)
   b5334:	f7ff ffca 	bl	b52cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5338:	4620      	mov	r0, r4
   b533a:	f7fe feb5 	bl	b40a8 <__cxa_guard_release>
   b533e:	4805      	ldr	r0, [pc, #20]	; (b5354 <_Z16_fetch_usbserialv+0x48>)
   b5340:	f000 fa61 	bl	b5806 <atexit>
	return _usbserial;
}
   b5344:	4802      	ldr	r0, [pc, #8]	; (b5350 <_Z16_fetch_usbserialv+0x44>)
   b5346:	b008      	add	sp, #32
   b5348:	bd10      	pop	{r4, pc}
   b534a:	bf00      	nop
   b534c:	2003e700 	.word	0x2003e700
   b5350:	2003e704 	.word	0x2003e704
   b5354:	000b5255 	.word	0x000b5255

000b5358 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5358:	4770      	bx	lr

000b535a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b535a:	7441      	strb	r1, [r0, #17]
}
   b535c:	4770      	bx	lr

000b535e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b535e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5360:	7c00      	ldrb	r0, [r0, #16]
   b5362:	f7ff f831 	bl	b43c8 <hal_usart_available_data_for_write>
}
   b5366:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b536a:	bd08      	pop	{r3, pc}

000b536c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b536c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b536e:	7c00      	ldrb	r0, [r0, #16]
   b5370:	f7ff f80a 	bl	b4388 <hal_usart_available>
}
   b5374:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5378:	bd08      	pop	{r3, pc}

000b537a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b537a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b537c:	7c00      	ldrb	r0, [r0, #16]
   b537e:	f7ff f813 	bl	b43a8 <hal_usart_peek>
}
   b5382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5386:	bd08      	pop	{r3, pc}

000b5388 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5388:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b538a:	7c00      	ldrb	r0, [r0, #16]
   b538c:	f7ff f804 	bl	b4398 <hal_usart_read>
}
   b5390:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5394:	bd08      	pop	{r3, pc}

000b5396 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5396:	7c00      	ldrb	r0, [r0, #16]
   b5398:	f7ff b80e 	b.w	b43b8 <hal_usart_flush>

000b539c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b539e:	7c45      	ldrb	r5, [r0, #17]
{
   b53a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53a2:	b12d      	cbz	r5, b53b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b53a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b53a6:	b003      	add	sp, #12
   b53a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b53ac:	f7fe bfe4 	b.w	b4378 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53b0:	7c00      	ldrb	r0, [r0, #16]
   b53b2:	9101      	str	r1, [sp, #4]
   b53b4:	f7ff f808 	bl	b43c8 <hal_usart_available_data_for_write>
   b53b8:	2800      	cmp	r0, #0
   b53ba:	9901      	ldr	r1, [sp, #4]
   b53bc:	dcf2      	bgt.n	b53a4 <_ZN11USARTSerial5writeEh+0x8>
}
   b53be:	4628      	mov	r0, r5
   b53c0:	b003      	add	sp, #12
   b53c2:	bd30      	pop	{r4, r5, pc}

000b53c4 <_ZN11USARTSerialD0Ev>:
   b53c4:	b510      	push	{r4, lr}
   b53c6:	2114      	movs	r1, #20
   b53c8:	4604      	mov	r4, r0
   b53ca:	f7fe fe66 	bl	b409a <_ZdlPvj>
   b53ce:	4620      	mov	r0, r4
   b53d0:	bd10      	pop	{r4, pc}
	...

000b53d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53d4:	b510      	push	{r4, lr}
   b53d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53da:	4604      	mov	r4, r0
   b53dc:	4608      	mov	r0, r1
   b53de:	4611      	mov	r1, r2
   b53e0:	2200      	movs	r2, #0
   b53e2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53e6:	4b04      	ldr	r3, [pc, #16]	; (b53f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53e8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53ea:	2301      	movs	r3, #1
  _serial = serial;
   b53ec:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53ee:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53f0:	f7fe fff2 	bl	b43d8 <hal_usart_init_ex>
}
   b53f4:	4620      	mov	r0, r4
   b53f6:	bd10      	pop	{r4, pc}
   b53f8:	000b5b04 	.word	0x000b5b04

000b53fc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b53fc:	b510      	push	{r4, lr}
      if (_M_empty())
   b53fe:	6883      	ldr	r3, [r0, #8]
   b5400:	4604      	mov	r4, r0
   b5402:	b90b      	cbnz	r3, b5408 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5404:	f000 f9fc 	bl	b5800 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5408:	68c3      	ldr	r3, [r0, #12]
   b540a:	4798      	blx	r3
      if (_M_manager)
   b540c:	68a3      	ldr	r3, [r4, #8]
   b540e:	b11b      	cbz	r3, b5418 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5410:	2203      	movs	r2, #3
   b5412:	4621      	mov	r1, r4
   b5414:	4620      	mov	r0, r4
   b5416:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5418:	4620      	mov	r0, r4
   b541a:	2110      	movs	r1, #16
}
   b541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5420:	f7fe be3b 	b.w	b409a <_ZdlPvj>

000b5424 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5424:	4770      	bx	lr

000b5426 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5428:	4606      	mov	r6, r0
   b542a:	4615      	mov	r5, r2
   b542c:	460c      	mov	r4, r1
   b542e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5430:	42bc      	cmp	r4, r7
   b5432:	d006      	beq.n	b5442 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5434:	6833      	ldr	r3, [r6, #0]
   b5436:	f814 1b01 	ldrb.w	r1, [r4], #1
   b543a:	689b      	ldr	r3, [r3, #8]
   b543c:	4630      	mov	r0, r6
   b543e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5440:	e7f6      	b.n	b5430 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5442:	4628      	mov	r0, r5
   b5444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5446 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5446:	7c00      	ldrb	r0, [r0, #16]
   b5448:	2200      	movs	r2, #0
   b544a:	f7fe bfe5 	b.w	b4418 <hal_i2c_write>

000b544e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b544e:	7c00      	ldrb	r0, [r0, #16]
   b5450:	2100      	movs	r1, #0
   b5452:	f7fe bfe9 	b.w	b4428 <hal_i2c_available>

000b5456 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5456:	7c00      	ldrb	r0, [r0, #16]
   b5458:	2100      	movs	r1, #0
   b545a:	f7fe bfed 	b.w	b4438 <hal_i2c_read>

000b545e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b545e:	7c00      	ldrb	r0, [r0, #16]
   b5460:	2100      	movs	r1, #0
   b5462:	f7fe bff1 	b.w	b4448 <hal_i2c_peek>

000b5466 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5466:	7c00      	ldrb	r0, [r0, #16]
   b5468:	2100      	movs	r1, #0
   b546a:	f7fe bff5 	b.w	b4458 <hal_i2c_flush>

000b546e <_ZN7TwoWireD0Ev>:
   b546e:	b510      	push	{r4, lr}
   b5470:	2114      	movs	r1, #20
   b5472:	4604      	mov	r4, r0
   b5474:	f7fe fe11 	bl	b409a <_ZdlPvj>
   b5478:	4620      	mov	r0, r4
   b547a:	bd10      	pop	{r4, pc}

000b547c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b547c:	b510      	push	{r4, lr}
   b547e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5482:	4604      	mov	r4, r0
   b5484:	4608      	mov	r0, r1
   b5486:	2100      	movs	r1, #0
   b5488:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b548c:	4b03      	ldr	r3, [pc, #12]	; (b549c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b548e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5490:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5492:	4611      	mov	r1, r2
   b5494:	f7fe fff0 	bl	b4478 <hal_i2c_init>
}
   b5498:	4620      	mov	r0, r4
   b549a:	bd10      	pop	{r4, pc}
   b549c:	000b5b34 	.word	0x000b5b34

000b54a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b54a0:	2300      	movs	r3, #0
   b54a2:	7c00      	ldrb	r0, [r0, #16]
   b54a4:	461a      	mov	r2, r3
   b54a6:	4619      	mov	r1, r3
   b54a8:	f7fe bf9e 	b.w	b43e8 <hal_i2c_begin>

000b54ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b54ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b54ae:	2200      	movs	r2, #0
   b54b0:	2314      	movs	r3, #20
   b54b2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b54b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b54ba:	780b      	ldrb	r3, [r1, #0]
   b54bc:	f88d 3008 	strb.w	r3, [sp, #8]
   b54c0:	684b      	ldr	r3, [r1, #4]
   b54c2:	9303      	str	r3, [sp, #12]
   b54c4:	68cb      	ldr	r3, [r1, #12]
   b54c6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b54c8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b54ca:	7a0b      	ldrb	r3, [r1, #8]
   b54cc:	9305      	str	r3, [sp, #20]
   b54ce:	a901      	add	r1, sp, #4
   b54d0:	f7fe ffda 	bl	b4488 <hal_i2c_request_ex>
}
   b54d4:	b007      	add	sp, #28
   b54d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b54da <_ZN7TwoWire11requestFromEhjh>:
{
   b54da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b54dc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b54de:	f88d 1000 	strb.w	r1, [sp]
   b54e2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b54e6:	9103      	str	r1, [sp, #12]
   b54e8:	bf18      	it	ne
   b54ea:	2301      	movne	r3, #1
   b54ec:	4669      	mov	r1, sp
    size_ = size;
   b54ee:	9201      	str	r2, [sp, #4]
   b54f0:	f88d 3008 	strb.w	r3, [sp, #8]
   b54f4:	f7ff ffda 	bl	b54ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b54f8:	b005      	add	sp, #20
   b54fa:	f85d fb04 	ldr.w	pc, [sp], #4

000b54fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b54fe:	2301      	movs	r3, #1
   b5500:	f7ff bfeb 	b.w	b54da <_ZN7TwoWire11requestFromEhjh>

000b5504 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5504:	7c00      	ldrb	r0, [r0, #16]
   b5506:	2200      	movs	r2, #0
   b5508:	f7fe bf76 	b.w	b43f8 <hal_i2c_begin_transmission>

000b550c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b550c:	7c00      	ldrb	r0, [r0, #16]
   b550e:	2200      	movs	r2, #0
   b5510:	f7fe bf7a 	b.w	b4408 <hal_i2c_end_transmission>

000b5514 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5514:	2101      	movs	r1, #1
   b5516:	f7ff bff9 	b.w	b550c <_ZN7TwoWire15endTransmissionEh>

000b551a <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b551a:	7c00      	ldrb	r0, [r0, #16]
   b551c:	2100      	movs	r1, #0
   b551e:	f7fe bfa3 	b.w	b4468 <hal_i2c_is_enabled>

000b5522 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5522:	2200      	movs	r2, #0
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	4611      	mov	r1, r2
   b5528:	f7ff b83a 	b.w	b45a0 <network_ready>

000b552c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b552c:	2200      	movs	r2, #0
   b552e:	6840      	ldr	r0, [r0, #4]
   b5530:	4611      	mov	r1, r2
   b5532:	f7ff b855 	b.w	b45e0 <network_listening>

000b5536 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5536:	2200      	movs	r2, #0
   b5538:	6840      	ldr	r0, [r0, #4]
   b553a:	4611      	mov	r1, r2
   b553c:	f7ff b860 	b.w	b4600 <network_get_listen_timeout>

000b5540 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5540:	6840      	ldr	r0, [r0, #4]
   b5542:	2200      	movs	r2, #0
   b5544:	f7ff b854 	b.w	b45f0 <network_set_listen_timeout>

000b5548 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5548:	6840      	ldr	r0, [r0, #4]
   b554a:	2200      	movs	r2, #0
   b554c:	f081 0101 	eor.w	r1, r1, #1
   b5550:	f7ff b83e 	b.w	b45d0 <network_listen>

000b5554 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5554:	2300      	movs	r3, #0
   b5556:	6840      	ldr	r0, [r0, #4]
   b5558:	461a      	mov	r2, r3
   b555a:	4619      	mov	r1, r3
   b555c:	f7ff b830 	b.w	b45c0 <network_off>

000b5560 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5560:	2300      	movs	r3, #0
   b5562:	6840      	ldr	r0, [r0, #4]
   b5564:	461a      	mov	r2, r3
   b5566:	4619      	mov	r1, r3
   b5568:	f7ff b822 	b.w	b45b0 <network_on>

000b556c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b556c:	2200      	movs	r2, #0
   b556e:	6840      	ldr	r0, [r0, #4]
   b5570:	4611      	mov	r1, r2
   b5572:	f7ff b805 	b.w	b4580 <network_connecting>

000b5576 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5576:	6840      	ldr	r0, [r0, #4]
   b5578:	2200      	movs	r2, #0
   b557a:	2102      	movs	r1, #2
   b557c:	f7ff b808 	b.w	b4590 <network_disconnect>

000b5580 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5580:	2300      	movs	r3, #0
   b5582:	6840      	ldr	r0, [r0, #4]
   b5584:	461a      	mov	r2, r3
   b5586:	f7fe bff3 	b.w	b4570 <network_connect>
	...

000b558c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b558c:	4b02      	ldr	r3, [pc, #8]	; (b5598 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b558e:	2204      	movs	r2, #4
   b5590:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5592:	4a02      	ldr	r2, [pc, #8]	; (b559c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5594:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5596:	4770      	bx	lr
   b5598:	2003e718 	.word	0x2003e718
   b559c:	000b5b5c 	.word	0x000b5b5c

000b55a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b55a0:	2300      	movs	r3, #0
   b55a2:	6840      	ldr	r0, [r0, #4]
   b55a4:	461a      	mov	r2, r3
   b55a6:	f7fe bfe3 	b.w	b4570 <network_connect>

000b55aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b55aa:	6840      	ldr	r0, [r0, #4]
   b55ac:	2200      	movs	r2, #0
   b55ae:	2102      	movs	r1, #2
   b55b0:	f7fe bfee 	b.w	b4590 <network_disconnect>

000b55b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b55b4:	2200      	movs	r2, #0
   b55b6:	6840      	ldr	r0, [r0, #4]
   b55b8:	4611      	mov	r1, r2
   b55ba:	f7fe bfe1 	b.w	b4580 <network_connecting>

000b55be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b55be:	2200      	movs	r2, #0
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	4611      	mov	r1, r2
   b55c4:	f7fe bfec 	b.w	b45a0 <network_ready>

000b55c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b55c8:	2300      	movs	r3, #0
   b55ca:	6840      	ldr	r0, [r0, #4]
   b55cc:	461a      	mov	r2, r3
   b55ce:	4619      	mov	r1, r3
   b55d0:	f7fe bfee 	b.w	b45b0 <network_on>

000b55d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b55d4:	2300      	movs	r3, #0
   b55d6:	6840      	ldr	r0, [r0, #4]
   b55d8:	461a      	mov	r2, r3
   b55da:	4619      	mov	r1, r3
   b55dc:	f7fe bff0 	b.w	b45c0 <network_off>

000b55e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b55e0:	6840      	ldr	r0, [r0, #4]
   b55e2:	2100      	movs	r1, #0
   b55e4:	f7ff b814 	b.w	b4610 <network_is_on>

000b55e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b55e8:	6840      	ldr	r0, [r0, #4]
   b55ea:	2100      	movs	r1, #0
   b55ec:	f7ff b818 	b.w	b4620 <network_is_off>

000b55f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	2200      	movs	r2, #0
   b55f4:	f081 0101 	eor.w	r1, r1, #1
   b55f8:	f7fe bfea 	b.w	b45d0 <network_listen>

000b55fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b55fc:	6840      	ldr	r0, [r0, #4]
   b55fe:	2200      	movs	r2, #0
   b5600:	f7fe bff6 	b.w	b45f0 <network_set_listen_timeout>

000b5604 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5604:	2200      	movs	r2, #0
   b5606:	6840      	ldr	r0, [r0, #4]
   b5608:	4611      	mov	r1, r2
   b560a:	f7fe bff9 	b.w	b4600 <network_get_listen_timeout>

000b560e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b560e:	2200      	movs	r2, #0
   b5610:	6840      	ldr	r0, [r0, #4]
   b5612:	4611      	mov	r1, r2
   b5614:	f7fe bfe4 	b.w	b45e0 <network_listening>

000b5618 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b561c:	b095      	sub	sp, #84	; 0x54
   b561e:	4614      	mov	r4, r2
   b5620:	460d      	mov	r5, r1
   b5622:	4607      	mov	r7, r0
    IPAddress addr;
   b5624:	f7ff fdd6 	bl	b51d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5628:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b562a:	221c      	movs	r2, #28
   b562c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b562e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5630:	f000 f8fd 	bl	b582e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5634:	2340      	movs	r3, #64	; 0x40
   b5636:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5638:	4620      	mov	r0, r4
   b563a:	466b      	mov	r3, sp
   b563c:	aa0c      	add	r2, sp, #48	; 0x30
   b563e:	2100      	movs	r1, #0
   b5640:	f7fe fe72 	bl	b4328 <netdb_getaddrinfo>
    if (!r) {
   b5644:	4604      	mov	r4, r0
   b5646:	2800      	cmp	r0, #0
   b5648:	d14b      	bne.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b564a:	4602      	mov	r2, r0
   b564c:	2101      	movs	r1, #1
   b564e:	6868      	ldr	r0, [r5, #4]
   b5650:	f7fe ffa6 	bl	b45a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5654:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5656:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5658:	4622      	mov	r2, r4
   b565a:	6868      	ldr	r0, [r5, #4]
   b565c:	f7fe ffa0 	bl	b45a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5660:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5662:	4681      	mov	r9, r0
        bool ok = false;
   b5664:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5666:	2e00      	cmp	r6, #0
   b5668:	d03b      	beq.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b566a:	2900      	cmp	r1, #0
   b566c:	d139      	bne.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b566e:	6873      	ldr	r3, [r6, #4]
   b5670:	2b02      	cmp	r3, #2
   b5672:	d003      	beq.n	b567c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5674:	2b0a      	cmp	r3, #10
   b5676:	d011      	beq.n	b569c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5678:	69f6      	ldr	r6, [r6, #28]
   b567a:	e7f4      	b.n	b5666 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b567c:	f1b8 0f00 	cmp.w	r8, #0
   b5680:	d0fa      	beq.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5682:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5684:	a806      	add	r0, sp, #24
   b5686:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5688:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b568a:	f7ff fdd1 	bl	b5230 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b568e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5690:	1d3c      	adds	r4, r7, #4
   b5692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5694:	682b      	ldr	r3, [r5, #0]
   b5696:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5698:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b569a:	e7ed      	b.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b569c:	f1b9 0f00 	cmp.w	r9, #0
   b56a0:	d0ea      	beq.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b56a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b56a4:	2210      	movs	r2, #16
   b56a6:	a801      	add	r0, sp, #4
   b56a8:	f000 f8c1 	bl	b582e <memset>
                    a.v = 6;
   b56ac:	2306      	movs	r3, #6
   b56ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b56b2:	ad01      	add	r5, sp, #4
   b56b4:	f104 0308 	add.w	r3, r4, #8
   b56b8:	3418      	adds	r4, #24
   b56ba:	6818      	ldr	r0, [r3, #0]
   b56bc:	6859      	ldr	r1, [r3, #4]
   b56be:	462a      	mov	r2, r5
   b56c0:	c203      	stmia	r2!, {r0, r1}
   b56c2:	3308      	adds	r3, #8
   b56c4:	42a3      	cmp	r3, r4
   b56c6:	4615      	mov	r5, r2
   b56c8:	d1f7      	bne.n	b56ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b56ca:	a901      	add	r1, sp, #4
   b56cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b56ce:	ad07      	add	r5, sp, #28
   b56d0:	f7ff fd8e 	bl	b51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b56d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56d6:	1d3c      	adds	r4, r7, #4
   b56d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56da:	682b      	ldr	r3, [r5, #0]
   b56dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b56de:	4649      	mov	r1, r9
   b56e0:	e7ca      	b.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b56e2:	9800      	ldr	r0, [sp, #0]
   b56e4:	f7fe fe18 	bl	b4318 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b56e8:	4638      	mov	r0, r7
   b56ea:	b015      	add	sp, #84	; 0x54
   b56ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b56f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b56f0:	4b02      	ldr	r3, [pc, #8]	; (b56fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b56f2:	4a03      	ldr	r2, [pc, #12]	; (b5700 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b56f4:	601a      	str	r2, [r3, #0]
   b56f6:	2200      	movs	r2, #0
   b56f8:	605a      	str	r2, [r3, #4]

} // spark
   b56fa:	4770      	bx	lr
   b56fc:	2003e720 	.word	0x2003e720
   b5700:	000b5b98 	.word	0x000b5b98

000b5704 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5704:	4770      	bx	lr
	...

000b5708 <_Z20acquireSerial1Bufferv>:
{
   b5708:	b538      	push	{r3, r4, r5, lr}
   b570a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b570c:	2514      	movs	r5, #20
   b570e:	462a      	mov	r2, r5
   b5710:	2100      	movs	r1, #0
   b5712:	f000 f88c 	bl	b582e <memset>
   b5716:	8025      	strh	r5, [r4, #0]
   b5718:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b571a:	4907      	ldr	r1, [pc, #28]	; (b5738 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b571c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b571e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5720:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5722:	f000 f86b 	bl	b57fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5726:	4904      	ldr	r1, [pc, #16]	; (b5738 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5728:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b572a:	4628      	mov	r0, r5
   b572c:	f000 f866 	bl	b57fc <_ZnajRKSt9nothrow_t>
    };
   b5730:	60e0      	str	r0, [r4, #12]
}
   b5732:	4620      	mov	r0, r4
   b5734:	bd38      	pop	{r3, r4, r5, pc}
   b5736:	bf00      	nop
   b5738:	000b5bcc 	.word	0x000b5bcc

000b573c <_Z22__fetch_global_Serial1v>:
{
   b573c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b573e:	4d0e      	ldr	r5, [pc, #56]	; (b5778 <_Z22__fetch_global_Serial1v+0x3c>)
   b5740:	7829      	ldrb	r1, [r5, #0]
   b5742:	f3bf 8f5b 	dmb	ish
   b5746:	f011 0401 	ands.w	r4, r1, #1
{
   b574a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b574c:	d111      	bne.n	b5772 <_Z22__fetch_global_Serial1v+0x36>
   b574e:	4628      	mov	r0, r5
   b5750:	f7fe fca5 	bl	b409e <__cxa_guard_acquire>
   b5754:	b168      	cbz	r0, b5772 <_Z22__fetch_global_Serial1v+0x36>
   b5756:	a801      	add	r0, sp, #4
   b5758:	f7ff ffd6 	bl	b5708 <_Z20acquireSerial1Bufferv>
   b575c:	aa01      	add	r2, sp, #4
   b575e:	4621      	mov	r1, r4
   b5760:	4806      	ldr	r0, [pc, #24]	; (b577c <_Z22__fetch_global_Serial1v+0x40>)
   b5762:	f7ff fe37 	bl	b53d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5766:	4628      	mov	r0, r5
   b5768:	f7fe fc9e 	bl	b40a8 <__cxa_guard_release>
   b576c:	4804      	ldr	r0, [pc, #16]	; (b5780 <_Z22__fetch_global_Serial1v+0x44>)
   b576e:	f000 f84a 	bl	b5806 <atexit>
    return serial1;
}
   b5772:	4802      	ldr	r0, [pc, #8]	; (b577c <_Z22__fetch_global_Serial1v+0x40>)
   b5774:	b007      	add	sp, #28
   b5776:	bd30      	pop	{r4, r5, pc}
   b5778:	2003e728 	.word	0x2003e728
   b577c:	2003e72c 	.word	0x2003e72c
   b5780:	000b5705 	.word	0x000b5705

000b5784 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5784:	4770      	bx	lr
	...

000b5788 <_Z17acquireWireBufferv>:
{
   b5788:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b578a:	2520      	movs	r5, #32
   b578c:	2314      	movs	r3, #20
{
   b578e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5790:	6003      	str	r3, [r0, #0]
   b5792:	6085      	str	r5, [r0, #8]
   b5794:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5796:	4906      	ldr	r1, [pc, #24]	; (b57b0 <_Z17acquireWireBufferv+0x28>)
   b5798:	4628      	mov	r0, r5
   b579a:	f000 f82f 	bl	b57fc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b579e:	4904      	ldr	r1, [pc, #16]	; (b57b0 <_Z17acquireWireBufferv+0x28>)
	};
   b57a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b57a2:	4628      	mov	r0, r5
   b57a4:	f000 f82a 	bl	b57fc <_ZnajRKSt9nothrow_t>
	};
   b57a8:	60e0      	str	r0, [r4, #12]
}
   b57aa:	4620      	mov	r0, r4
   b57ac:	bd38      	pop	{r3, r4, r5, pc}
   b57ae:	bf00      	nop
   b57b0:	000b5bcc 	.word	0x000b5bcc

000b57b4 <_Z19__fetch_global_Wirev>:
{
   b57b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57b6:	4d0e      	ldr	r5, [pc, #56]	; (b57f0 <_Z19__fetch_global_Wirev+0x3c>)
   b57b8:	7829      	ldrb	r1, [r5, #0]
   b57ba:	f3bf 8f5b 	dmb	ish
   b57be:	f011 0401 	ands.w	r4, r1, #1
{
   b57c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57c4:	d111      	bne.n	b57ea <_Z19__fetch_global_Wirev+0x36>
   b57c6:	4628      	mov	r0, r5
   b57c8:	f7fe fc69 	bl	b409e <__cxa_guard_acquire>
   b57cc:	b168      	cbz	r0, b57ea <_Z19__fetch_global_Wirev+0x36>
   b57ce:	a801      	add	r0, sp, #4
   b57d0:	f7ff ffda 	bl	b5788 <_Z17acquireWireBufferv>
   b57d4:	aa01      	add	r2, sp, #4
   b57d6:	4621      	mov	r1, r4
   b57d8:	4806      	ldr	r0, [pc, #24]	; (b57f4 <_Z19__fetch_global_Wirev+0x40>)
   b57da:	f7ff fe4f 	bl	b547c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b57de:	4628      	mov	r0, r5
   b57e0:	f7fe fc62 	bl	b40a8 <__cxa_guard_release>
   b57e4:	4804      	ldr	r0, [pc, #16]	; (b57f8 <_Z19__fetch_global_Wirev+0x44>)
   b57e6:	f000 f80e 	bl	b5806 <atexit>
	return wire;
}
   b57ea:	4802      	ldr	r0, [pc, #8]	; (b57f4 <_Z19__fetch_global_Wirev+0x40>)
   b57ec:	b007      	add	sp, #28
   b57ee:	bd30      	pop	{r4, r5, pc}
   b57f0:	2003e744 	.word	0x2003e744
   b57f4:	2003e748 	.word	0x2003e748
   b57f8:	000b5785 	.word	0x000b5785

000b57fc <_ZnajRKSt9nothrow_t>:
   b57fc:	f7fe bc4b 	b.w	b4096 <_Znaj>

000b5800 <_ZSt25__throw_bad_function_callv>:
   b5800:	b508      	push	{r3, lr}
   b5802:	f7fe ff4d 	bl	b46a0 <abort>

000b5806 <atexit>:
   b5806:	2300      	movs	r3, #0
   b5808:	4601      	mov	r1, r0
   b580a:	461a      	mov	r2, r3
   b580c:	4618      	mov	r0, r3
   b580e:	f000 b873 	b.w	b58f8 <__register_exitproc>

000b5812 <memcpy>:
   b5812:	440a      	add	r2, r1
   b5814:	4291      	cmp	r1, r2
   b5816:	f100 33ff 	add.w	r3, r0, #4294967295
   b581a:	d100      	bne.n	b581e <memcpy+0xc>
   b581c:	4770      	bx	lr
   b581e:	b510      	push	{r4, lr}
   b5820:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5824:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5828:	4291      	cmp	r1, r2
   b582a:	d1f9      	bne.n	b5820 <memcpy+0xe>
   b582c:	bd10      	pop	{r4, pc}

000b582e <memset>:
   b582e:	4402      	add	r2, r0
   b5830:	4603      	mov	r3, r0
   b5832:	4293      	cmp	r3, r2
   b5834:	d100      	bne.n	b5838 <memset+0xa>
   b5836:	4770      	bx	lr
   b5838:	f803 1b01 	strb.w	r1, [r3], #1
   b583c:	e7f9      	b.n	b5832 <memset+0x4>
	...

000b5840 <srand>:
   b5840:	b538      	push	{r3, r4, r5, lr}
   b5842:	4b10      	ldr	r3, [pc, #64]	; (b5884 <srand+0x44>)
   b5844:	681d      	ldr	r5, [r3, #0]
   b5846:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5848:	4604      	mov	r4, r0
   b584a:	b9b3      	cbnz	r3, b587a <srand+0x3a>
   b584c:	2018      	movs	r0, #24
   b584e:	f7fe ff0f 	bl	b4670 <malloc>
   b5852:	4602      	mov	r2, r0
   b5854:	63a8      	str	r0, [r5, #56]	; 0x38
   b5856:	b920      	cbnz	r0, b5862 <srand+0x22>
   b5858:	4b0b      	ldr	r3, [pc, #44]	; (b5888 <srand+0x48>)
   b585a:	480c      	ldr	r0, [pc, #48]	; (b588c <srand+0x4c>)
   b585c:	2142      	movs	r1, #66	; 0x42
   b585e:	f7fe ff2f 	bl	b46c0 <__assert_func>
   b5862:	490b      	ldr	r1, [pc, #44]	; (b5890 <srand+0x50>)
   b5864:	4b0b      	ldr	r3, [pc, #44]	; (b5894 <srand+0x54>)
   b5866:	e9c0 1300 	strd	r1, r3, [r0]
   b586a:	4b0b      	ldr	r3, [pc, #44]	; (b5898 <srand+0x58>)
   b586c:	6083      	str	r3, [r0, #8]
   b586e:	230b      	movs	r3, #11
   b5870:	8183      	strh	r3, [r0, #12]
   b5872:	2100      	movs	r1, #0
   b5874:	2001      	movs	r0, #1
   b5876:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b587a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b587c:	2200      	movs	r2, #0
   b587e:	611c      	str	r4, [r3, #16]
   b5880:	615a      	str	r2, [r3, #20]
   b5882:	bd38      	pop	{r3, r4, r5, pc}
   b5884:	2003e64c 	.word	0x2003e64c
   b5888:	000b5bcd 	.word	0x000b5bcd
   b588c:	000b5be4 	.word	0x000b5be4
   b5890:	abcd330e 	.word	0xabcd330e
   b5894:	e66d1234 	.word	0xe66d1234
   b5898:	0005deec 	.word	0x0005deec

000b589c <strcpy>:
   b589c:	4603      	mov	r3, r0
   b589e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b58a2:	f803 2b01 	strb.w	r2, [r3], #1
   b58a6:	2a00      	cmp	r2, #0
   b58a8:	d1f9      	bne.n	b589e <strcpy+0x2>
   b58aa:	4770      	bx	lr

000b58ac <strdup>:
   b58ac:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <strdup+0xc>)
   b58ae:	4601      	mov	r1, r0
   b58b0:	6818      	ldr	r0, [r3, #0]
   b58b2:	f000 b803 	b.w	b58bc <_strdup_r>
   b58b6:	bf00      	nop
   b58b8:	2003e64c 	.word	0x2003e64c

000b58bc <_strdup_r>:
   b58bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58be:	4604      	mov	r4, r0
   b58c0:	4608      	mov	r0, r1
   b58c2:	460d      	mov	r5, r1
   b58c4:	f000 f80f 	bl	b58e6 <strlen>
   b58c8:	1c42      	adds	r2, r0, #1
   b58ca:	4611      	mov	r1, r2
   b58cc:	4620      	mov	r0, r4
   b58ce:	9201      	str	r2, [sp, #4]
   b58d0:	f7fe feee 	bl	b46b0 <_malloc_r>
   b58d4:	4604      	mov	r4, r0
   b58d6:	b118      	cbz	r0, b58e0 <_strdup_r+0x24>
   b58d8:	9a01      	ldr	r2, [sp, #4]
   b58da:	4629      	mov	r1, r5
   b58dc:	f7ff ff99 	bl	b5812 <memcpy>
   b58e0:	4620      	mov	r0, r4
   b58e2:	b003      	add	sp, #12
   b58e4:	bd30      	pop	{r4, r5, pc}

000b58e6 <strlen>:
   b58e6:	4603      	mov	r3, r0
   b58e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b58ec:	2a00      	cmp	r2, #0
   b58ee:	d1fb      	bne.n	b58e8 <strlen+0x2>
   b58f0:	1a18      	subs	r0, r3, r0
   b58f2:	3801      	subs	r0, #1
   b58f4:	4770      	bx	lr
	...

000b58f8 <__register_exitproc>:
   b58f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b58fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b59b8 <__register_exitproc+0xc0>
   b5900:	4606      	mov	r6, r0
   b5902:	f8d8 0000 	ldr.w	r0, [r8]
   b5906:	461f      	mov	r7, r3
   b5908:	460d      	mov	r5, r1
   b590a:	4691      	mov	r9, r2
   b590c:	f000 f856 	bl	b59bc <__retarget_lock_acquire_recursive>
   b5910:	4b25      	ldr	r3, [pc, #148]	; (b59a8 <__register_exitproc+0xb0>)
   b5912:	681c      	ldr	r4, [r3, #0]
   b5914:	b934      	cbnz	r4, b5924 <__register_exitproc+0x2c>
   b5916:	4c25      	ldr	r4, [pc, #148]	; (b59ac <__register_exitproc+0xb4>)
   b5918:	601c      	str	r4, [r3, #0]
   b591a:	4b25      	ldr	r3, [pc, #148]	; (b59b0 <__register_exitproc+0xb8>)
   b591c:	b113      	cbz	r3, b5924 <__register_exitproc+0x2c>
   b591e:	681b      	ldr	r3, [r3, #0]
   b5920:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5924:	6863      	ldr	r3, [r4, #4]
   b5926:	2b1f      	cmp	r3, #31
   b5928:	dd07      	ble.n	b593a <__register_exitproc+0x42>
   b592a:	f8d8 0000 	ldr.w	r0, [r8]
   b592e:	f000 f847 	bl	b59c0 <__retarget_lock_release_recursive>
   b5932:	f04f 30ff 	mov.w	r0, #4294967295
   b5936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b593a:	b34e      	cbz	r6, b5990 <__register_exitproc+0x98>
   b593c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5940:	b988      	cbnz	r0, b5966 <__register_exitproc+0x6e>
   b5942:	4b1c      	ldr	r3, [pc, #112]	; (b59b4 <__register_exitproc+0xbc>)
   b5944:	b923      	cbnz	r3, b5950 <__register_exitproc+0x58>
   b5946:	f8d8 0000 	ldr.w	r0, [r8]
   b594a:	f000 f838 	bl	b59be <__retarget_lock_release>
   b594e:	e7f0      	b.n	b5932 <__register_exitproc+0x3a>
   b5950:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5954:	f7fe fe8c 	bl	b4670 <malloc>
   b5958:	2800      	cmp	r0, #0
   b595a:	d0f4      	beq.n	b5946 <__register_exitproc+0x4e>
   b595c:	2300      	movs	r3, #0
   b595e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5962:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5966:	6863      	ldr	r3, [r4, #4]
   b5968:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b596c:	2201      	movs	r2, #1
   b596e:	409a      	lsls	r2, r3
   b5970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5978:	4313      	orrs	r3, r2
   b597a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b597e:	2e02      	cmp	r6, #2
   b5980:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5984:	bf02      	ittt	eq
   b5986:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b598a:	4313      	orreq	r3, r2
   b598c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5990:	6863      	ldr	r3, [r4, #4]
   b5992:	f8d8 0000 	ldr.w	r0, [r8]
   b5996:	1c5a      	adds	r2, r3, #1
   b5998:	3302      	adds	r3, #2
   b599a:	6062      	str	r2, [r4, #4]
   b599c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b59a0:	f000 f80e 	bl	b59c0 <__retarget_lock_release_recursive>
   b59a4:	2000      	movs	r0, #0
   b59a6:	e7c6      	b.n	b5936 <__register_exitproc+0x3e>
   b59a8:	2003e7e8 	.word	0x2003e7e8
   b59ac:	2003e75c 	.word	0x2003e75c
   b59b0:	00000000 	.word	0x00000000
   b59b4:	000b4671 	.word	0x000b4671
   b59b8:	2003e6b0 	.word	0x2003e6b0

000b59bc <__retarget_lock_acquire_recursive>:
   b59bc:	4770      	bx	lr

000b59be <__retarget_lock_release>:
   b59be:	4770      	bx	lr

000b59c0 <__retarget_lock_release_recursive>:
   b59c0:	4770      	bx	lr

000b59c2 <link_code_end>:
	...

000b59c4 <dynalib_user>:
   b59c4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b59d4:	0000 0000 424d 616c 6873 696b 7241 6f67     ....MBlashkiArgo
   b59e4:	5f6e 7553 6c6e 6769 7468 5200 6165 7964     n_Sunlight.Ready
   b59f4:	4200 3148 3537 2030 6553 7574 0070 7574     .BH1750 Setup.tu
   b5a04:	6e72 6465 7320 6168 7964 202e 7449 7720     rned shady. It w
   b5a14:	7361 6920 206e 6874 2065 7573 206e 6f66     as in the sun fo
   b5a24:	2072 2000 696d 756e 6574 0073 7574 6e72     r . minutes.turn
   b5a34:	6465 7320 6e75 796e 0000 0000               ed sunny....

000b5a40 <_ZTVN5spark13EthernetClassE>:
	...
   b5a48:	473f 000b 4735 000b 472b 000b 4721 000b     ?G..5G..+G..!G..
   b5a58:	4715 000b 4709 000b 55e1 000b 55e9 000b     .G...G...U...U..
   b5a68:	46fd 000b 46f5 000b 46eb 000b 46e1 000b     .F...F...F...F..
   b5a78:	5619 000b 7061 0070 5925 252d 2d6d 6425     .V..app.%Y-%m-%d
   b5a88:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5a98:	6d69 0065                                   ime.

000b5a9c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5aa4:	4c31 000b 4c37 000b 4c75 000b 4c45 000b     1L..7L..uL..EL..
   b5ab4:	4c33 000b                                   3L..

000b5ab8 <_ZTV9IPAddress>:
	...
   b5ac0:	5171 000b 5161 000b 5163 000b               qQ..aQ..cQ..

000b5acc <_ZTV9USBSerial>:
	...
   b5ad4:	5257 000b 52bf 000b 5295 000b 49fd 000b     WR...R...R...I..
   b5ae4:	5287 000b 5259 000b 5269 000b 52b9 000b     .R..YR..iR...R..
   b5af4:	5279 000b 5251 000b                         yR..QR..

000b5afc <_ZTV11USARTSerial>:
	...
   b5b04:	5359 000b 53c5 000b 539d 000b 49fd 000b     YS...S...S...I..
   b5b14:	536d 000b 5389 000b 537b 000b 5397 000b     mS...S..{S...S..
   b5b24:	535b 000b 535f 000b                         [S.._S..

000b5b2c <_ZTV7TwoWire>:
	...
   b5b34:	5425 000b 546f 000b 5447 000b 5427 000b     %T..oT..GT..'T..
   b5b44:	544f 000b 5457 000b 545f 000b 5467 000b     OT..WT.._T..gT..

000b5b54 <_ZTVN5spark9WiFiClassE>:
	...
   b5b5c:	5581 000b 5577 000b 556d 000b 5523 000b     .U..wU..mU..#U..
   b5b6c:	5561 000b 5555 000b 55e1 000b 55e9 000b     aU..UU...U...U..
   b5b7c:	5549 000b 5541 000b 5537 000b 552d 000b     IU..AU..7U..-U..
   b5b8c:	5619 000b                                   .V..

000b5b90 <_ZTVN5spark12NetworkClassE>:
	...
   b5b98:	55a1 000b 55ab 000b 55b5 000b 55bf 000b     .U...U...U...U..
   b5ba8:	55c9 000b 55d5 000b 55e1 000b 55e9 000b     .U...U...U...U..
   b5bb8:	55f1 000b 55fd 000b 5605 000b 560f 000b     .U...U...V...V..
   b5bc8:	5619 000b                                   .V..

000b5bcc <_ZSt7nothrow>:
   b5bcc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5bdc:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5bec:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5bfc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5c0c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5c1c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5c2c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5c3c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5c4c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5c5c:	646e 632e                                    nd.c.

000b5c61 <link_const_variable_data_end>:
   b5c61:	00          	.byte	0x00
	...

000b5c64 <link_constructors_location>:
   b5c64:	000b4241 	.word	0x000b4241
   b5c68:	000b4749 	.word	0x000b4749
   b5c6c:	000b475d 	.word	0x000b475d
   b5c70:	000b49ed 	.word	0x000b49ed
   b5c74:	000b4ac1 	.word	0x000b4ac1
   b5c78:	000b4ad1 	.word	0x000b4ad1
   b5c7c:	000b4aed 	.word	0x000b4aed
   b5c80:	000b558d 	.word	0x000b558d
   b5c84:	000b56f1 	.word	0x000b56f1

000b5c88 <link_constructors_end>:
	...
